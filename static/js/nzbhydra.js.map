{"version":3,"sources":["nzbhydra.js","directives/search-result.js","directives/search-result-non-title-columns.js","directives/search-history.js","directives/on-finish-render.js","directives/indexer-statuses.js","directives/focus-on.js","directives/download-history.js","directives/cfg-form-entry.js","directives/addable-nzb.js","update-service.js","update-footer-controller.js","stats-service.js","stats-controller.js","search-service.js","search-results-controller.js","search-controller.js","restart-service.js","nzb-download-service.js","modal.js","modal-service.js","generic-error-handler.js","formly-config.js","filters.js","config-service.js","config-fields-service.js","config-controller.js","categories-service.js","about-controller.js"],"names":[],"mappingsjNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACzDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACjrBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACpDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACtCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACpBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AClDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC3BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACnBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AClBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AChvrpPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACjCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AChDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC/DA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACnBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AChtZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACnwlJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AClFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"nzbhydra.js","sourcesContent":["var nzbhydraapp = angular.module('nzbhydraApp', ['angular-loading-bar', 'ngAnimate', 'ui.bootstrap', 'ipCookie', 'angular-growl', 'angular.filter', 'filters', 'ui.router', 'blockUI', 'mgcrea.ngStrap', 'angularUtils.directives.dirPagination', 'nvd3', 'formly', 'formlyBootstrap', 'frapontillo.bootstrap-switch', 'ui.select', 'ngSanitize', 'checklist-model']);\r\n\r\n\r\nangular.module('nzbhydraApp').config([\"$stateProvider\", \"$urlRouterProvider\", \"$locationProvider\", \"blockUIConfig\", \"$urlMatcherFactoryProvider\", function ($stateProvider, $urlRouterProvider, $locationProvider, blockUIConfig, $urlMatcherFactoryProvider) {\r\n\r\n    blockUIConfig.autoBlock = false;\r\n    //$urlRouterProvider.otherwise(\"/search/\");\r\n    $urlMatcherFactoryProvider.strictMode(false);\r\n    \r\n    $stateProvider\r\n        .state(\"search.results\", {\r\n            templateUrl: \"static/html/states/search-results.html\",\r\n            controller: \"SearchResultsController\",\r\n            controllerAs: \"srController\",\r\n            options: {\r\n                inherit: false\r\n            },\r\n            params: {\r\n                results: [],\r\n                indexersearches: [],\r\n                total: 0,\r\n                resultsCount: 0,\r\n                minsize: undefined,\r\n                maxsize: undefined,\r\n                minage: undefined,\r\n                maxage: undefined\r\n            }\r\n        })\r\n        .state(\"config\", {\r\n            url: \"/config\",\r\n            templateUrl: \"static/html/states/config.html\",\r\n            controller: \"ConfigController\",\r\n            resolve: {\r\n                config: ['ConfigService', function (ConfigService) {\r\n                    return ConfigService.get();\r\n                }]\r\n            }\r\n        })\r\n        .state(\"config.searching\", {\r\n            url: \"/searching\",\r\n            templateUrl: \"static/html/states/config.html\",\r\n            controller: \"ConfigController\",\r\n            resolve: {\r\n                config: ['ConfigService', function (ConfigService) {\r\n                    return ConfigService.get();\r\n                }]\r\n            }\r\n        })\r\n        .state(\"config.downloader\", {\r\n            url: \"/downloader\",\r\n            templateUrl: \"static/html/states/config.html\",\r\n            controller: \"ConfigController\",\r\n            resolve: {\r\n                config: ['ConfigService', function (ConfigService) {\r\n                    return ConfigService.get();\r\n                }]\r\n            }\r\n        })\r\n        .state(\"config.indexers\", {\r\n            url: \"/indexers\",\r\n            templateUrl: \"static/html/states/config.html\",\r\n            controller: \"ConfigController\",\r\n            resolve: {\r\n                config: ['ConfigService', function (ConfigService) {\r\n                    return ConfigService.get();\r\n                }]\r\n            }\r\n        })\r\n        .state(\"config.system\", {\r\n            url: \"/system\",\r\n            templateUrl: \"static/html/states/config.html\",\r\n            controller: \"ConfigController\",\r\n            resolve: {\r\n                config: ['ConfigService', function (ConfigService) {\r\n                    return ConfigService.get();\r\n                }]\r\n            }\r\n        })\r\n        .state(\"config.log\", {\r\n            url: \"/log\",\r\n            templateUrl: \"static/html/states/config.html\",\r\n            controller: \"ConfigController\",\r\n            resolve: {\r\n                config: ['ConfigService', function (ConfigService) {\r\n                    return ConfigService.get();\r\n                }]\r\n            }\r\n        })\r\n        .state(\"stats\", {\r\n            url: \"/stats\",\r\n            templateUrl: \"static/html/states/stats.html\",\r\n            controller: \"StatsController\",\r\n            resolve: {\r\n                stats: ['StatsService', function(StatsService) {\r\n                    return StatsService.get();\r\n                }]\r\n            }\r\n        })\r\n        .state(\"stats.indexers\", {\r\n            url: \"/indexers\",\r\n            templateUrl: \"static/html/states/stats.html\",\r\n            controller: \"StatsController\",\r\n            resolve: {\r\n                stats: ['StatsService', function (StatsService) {\r\n                    return StatsService.get();\r\n                }]\r\n            }\r\n        })\r\n        .state(\"stats.searches\", {\r\n            url: \"/searches\",\r\n            templateUrl: \"static/html/states/stats.html\",\r\n            controller: \"StatsController\",\r\n            resolve: {\r\n                stats: ['StatsService', function (StatsService) {\r\n                    return StatsService.get();\r\n                }]\r\n            }\r\n        })\r\n        .state(\"stats.downloads\", {\r\n            url: \"/downloads\",\r\n            templateUrl: \"static/html/states/stats.html\",\r\n            controller: \"StatsController\",\r\n            resolve: {\r\n                stats: ['StatsService', function (StatsService) {\r\n                    return StatsService.get();\r\n                }]\r\n            }\r\n        })\r\n        .state(\"about\", {\r\n            url: \"/about\",\r\n            templateUrl: \"static/html/states/about.html\",\r\n            controller: \"AboutController\",\r\n            resolve: {\r\n                versionsPromise: ['$http', function ($http) {\r\n                    return $http.get(\"internalapi/get_versions\");\r\n                }]\r\n            }\r\n        })\r\n        .state(\"search\", {\r\n            url: \"/:search?category&query&imdbid&tvdbid&title&season&episode&minsize&maxsize&minage&maxage&offsets&rid&mode&tmdbid&indexers\",\r\n            templateUrl: \"static/html/states/search.html\",\r\n            controller: \"SearchController\"\r\n        })\r\n    ;\r\n\r\n    $locationProvider.html5Mode(true);\r\n\r\n}]);\r\n\r\nnzbhydraapp.config([\"paginationTemplateProvider\", function (paginationTemplateProvider) {\r\n    paginationTemplateProvider.setPath('static/html/dirPagination.tpl.html');\r\n}]);\r\n\r\n\r\nnzbhydraapp.config(['cfpLoadingBarProvider', function (cfpLoadingBarProvider) {\r\n    cfpLoadingBarProvider.latencyThreshold = 100;\r\n}]);\r\n\r\nnzbhydraapp.config(['growlProvider', function (growlProvider) {\r\n    growlProvider.globalTimeToLive(5000);\r\n    growlProvider.globalPosition('bottom-right');\r\n}]);\r\n\r\n\r\nnzbhydraapp.directive('ngEnter', function () {\r\n    return function (scope, element, attr) {\r\n        element.bind(\"keydown keypress\", function (event) {\r\n            if (event.which === 13) {\r\n                scope.$apply(function () {\r\n                    scope.$evalAsync(attr.ngEnter);\r\n                });\r\n\r\n                event.preventDefault();\r\n            }\r\n        });\r\n    };\r\n});\r\n\r\n\r\nnzbhydraapp.filter('nzblink', function () {\r\n    return function (resultItem) {\r\n        var uri = new URI(\"internalapi/getnzb\");\r\n        uri.addQuery(\"guid\", resultItem.guid);\r\n        uri.addQuery(\"title\", resultItem.title);\r\n        uri.addQuery(\"provider\", resultItem.provider);\r\n\r\n        return uri.toString();\r\n    }\r\n});\r\n\r\n\r\nnzbhydraapp.factory('focus', [\"$rootScope\", \"$timeout\", function ($rootScope, $timeout) {\r\n    return function (name) {\r\n        $timeout(function () {\r\n            $rootScope.$broadcast('focusOn', name);\r\n        });\r\n    }\r\n}]);\r\n\r\nnzbhydraapp.filter('unsafe', [\"$sce\", function ($sce) {\r\n    return $sce.trustAsHtml;\r\n}]);\r\n\r\n\r\n_.mixin({\r\n    isNullOrEmpty: function (string) {\r\n        return (_.isUndefined(string) || _.isNull(string) || (_.isString(string) && string.length === 0))\r\n    }\r\n});\r\n","angular\r\n    .module('nzbhydraApp')\r\n    .directive('searchResult', searchResult);\r\n\r\nfunction searchResult() {\r\n    return {\r\n        templateUrl: 'static/html/directives/search-result.html',\r\n        require: '^titleGroup',\r\n        scope: {\r\n            titleGroup: \"=\",\r\n            showDuplicates: \"=\",\r\n            selected: \"=\",\r\n            rowIndex: \"=\"\r\n        },\r\n        controller: ['$scope', '$element', '$attrs', controller],\r\n        multiElement: true\r\n    };\r\n\r\n    function controller($scope, $element, $attrs) {\r\n        $scope.titleGroupExpanded = false;\r\n        $scope.hashGroupExpanded = {};\r\n\r\n        $scope.toggleTitleGroup = function () {\r\n            $scope.titleGroupExpanded = !$scope.titleGroupExpanded;\r\n            if (!$scope.titleGroupExpanded) {\r\n                $scope.hashGroupExpanded[$scope.titleGroup[0][0].hash] = false; //Also collapse the first title's duplicates\r\n            }\r\n        };\r\n\r\n        $scope.groupingRowDuplicatesToShow = groupingRowDuplicatesToShow;\r\n        function groupingRowDuplicatesToShow() {\r\n            if ($scope.showDuplicates &&  $scope.titleGroup[0].length > 1 && $scope.hashGroupExpanded[$scope.titleGroup[0][0].hash]) {\r\n                return $scope.titleGroup[0].slice(1);\r\n            } else {\r\n                return [];\r\n            }\r\n        }\r\n\r\n        //<div ng-repeat=\"hashGroup in titleGroup\" ng-if=\"titleGroup.length > 0 && titleGroupExpanded\"  class=\"search-results-row\">\r\n        $scope.otherTitleRowsToShow = otherTitleRowsToShow;\r\n        function otherTitleRowsToShow() {\r\n            if ($scope.titleGroup.length > 1 && $scope.titleGroupExpanded) {\r\n                return $scope.titleGroup.slice(1);\r\n            } else {\r\n                return [];\r\n            }\r\n        }\r\n        \r\n        $scope.hashGroupDuplicatesToShow = hashGroupDuplicatesToShow;\r\n        function hashGroupDuplicatesToShow(hashGroup) {\r\n            if ($scope.showDuplicates && $scope.hashGroupExpanded[hashGroup[0].hash]) {\r\n                return hashGroup.slice(1);\r\n            } else {\r\n                return [];\r\n            }\r\n        }\r\n    }\r\n}","angular\r\n    .module('nzbhydraApp')\r\n    .directive('otherColumns', otherColumns);\r\n\r\nfunction otherColumns($http, $templateCache, $compile) {\r\n    controller.$inject = [\"$scope\", \"$http\", \"$uibModal\", \"growl\"];\r\n    return {\r\n        scope: {\r\n            result: \"=\"\r\n        },\r\n        multiElement: true,\r\n\r\n        link: function (scope, element, attrs) {\r\n            $http.get('static/html/directives/search-result-non-title-columns.html', {cache: $templateCache}).success(function (templateContent) {\r\n                element.replaceWith($compile(templateContent)(scope));\r\n            });\r\n\r\n        },\r\n        controller: controller\r\n    };\r\n\r\n    function controller($scope, $http, $uibModal, growl) {\r\n\r\n        $scope.showNfo = showNfo;\r\n        function showNfo(resultItem) {\r\n            if (resultItem.has_nfo == 0) {\r\n                return;\r\n            }\r\n            var uri = new URI(\"internalapi/getnfo\");\r\n            uri.addQuery(\"indexer\", resultItem.indexer);\r\n            uri.addQuery(\"guid\", resultItem.indexerguid);\r\n            return $http.get(uri).then(function (response) {\r\n                if (response.data.has_nfo) {\r\n                    $scope.openModal(\"lg\", response.data.nfo)\r\n                } else {\r\n                    if (!angular.isUndefined(resultItem.message)) {\r\n                        growl.error(resultItem.message);\r\n                    } else {\r\n                        growl.info(\"No NFO available\");\r\n                    }\r\n                }\r\n            });\r\n        }\r\n\r\n        $scope.openModal = openModal;\r\n\r\n        function openModal(size, nfo) {\r\n            var modalInstance = $uibModal.open({\r\n                template: '<pre class=\"nfo\"><span ng-bind-html=\"nfo\"></span></pre>',\r\n                controller: 'NfoModalInstanceCtrl',\r\n                size: size,\r\n                resolve: {\r\n                    nfo: function () {\r\n                        return nfo;\r\n                    }\r\n                }\r\n            });\r\n\r\n            modalInstance.result.then();\r\n        }\r\n\r\n    }\r\n}\r\notherColumns.$inject = [\"$http\", \"$templateCache\", \"$compile\"];\r\n\r\nangular\r\n    .module('nzbhydraApp')\r\n    .controller('NfoModalInstanceCtrl', NfoModalInstanceCtrl);\r\n\r\nfunction NfoModalInstanceCtrl($scope, $modalInstance, nfo) {\r\n\r\n    $scope.nfo = nfo;\r\n\r\n    $scope.ok = function () {\r\n        $modalInstance.close($scope.selected.item);\r\n    };\r\n\r\n    $scope.cancel = function () {\r\n        $modalInstance.dismiss();\r\n    };\r\n}\r\nNfoModalInstanceCtrl.$inject = [\"$scope\", \"$modalInstance\", \"nfo\"];","angular\r\n    .module('nzbhydraApp')\r\n    .directive('searchHistory', searchHistory);\r\n\r\n\r\nfunction searchHistory() {\r\n    return {\r\n        templateUrl: 'static/html/directives/search-history.html',\r\n        controller: ['$scope', '$http','$state', controller],\r\n        scope: {}\r\n    };\r\n    \r\n    function controller($scope, $http, $state) {\r\n        $scope.type = \"All\";\r\n        $scope.limit = 100;\r\n        $scope.pagination = {\r\n            current: 1\r\n        };\r\n\r\n        getSearchRequestsPage(1);\r\n\r\n        $scope.pageChanged = function (newPage) {\r\n            getSearchRequestsPage(newPage);\r\n        };\r\n        \r\n        $scope.changeType = function(type) {\r\n            $scope.type = type;\r\n            getSearchRequestsPage($scope.pagination.current);\r\n        };\r\n\r\n        function getSearchRequestsPage(pageNumber) {\r\n            $http.get(\"internalapi/getsearchrequests\", {params: {page: pageNumber, limit: $scope.limit, type: $scope.type}}).success(function (response) {\r\n                $scope.searchRequests = response.searchRequests;\r\n                $scope.totalRequests = response.totalRequests;\r\n            });\r\n        }\r\n        \r\n        $scope.openSearch = function (request) {\r\n            var stateParams = {};\r\n            if (request.identifier_key == \"imdbid\") {\r\n                stateParams.imdbid = request.identifier_value;\r\n            } else if (request.identifier_key == \"tvdbid\" || request.identifier_key == \"rid\") {\r\n                if (request.identifier_key == \"rid\" ) {\r\n                    stateParams.rid = request.identifier_value;\r\n                } else {\r\n                    stateParams.tvdbid = request.identifier_value;\r\n                } \r\n                \r\n                if (request.season != \"\") {\r\n                    stateParams.season = request.season;\r\n                }\r\n                if (request.episode != \"\") {\r\n                    stateParams.episode = request.episode;\r\n                }\r\n            }\r\n            if (request.query != \"\") {\r\n                stateParams.query = request.query;\r\n            }\r\n            if (request.type == \"tv\") {\r\n                stateParams.mode = \"tvsearch\"\r\n            } else if (request.type == \"tv\") {\r\n                stateParams.mode = \"moviesearch\"\r\n            } else {\r\n                stateParams.mode = \"search\"\r\n            }\r\n            \r\n            if (request.category != \"\") {\r\n                stateParams.category = request.category;\r\n            }\r\n\r\n            stateParams.category = request.category;\r\n            \r\n            $state.go(\"search\", stateParams, {inherit: false});\r\n        };\r\n\r\n\r\n    }\r\n}","//Can be used in an ng-repeat directive to call a function when the last element was rendered\r\n//We use it to mark the end of sorting / filtering so we can stop blocking the UI\r\n\r\nangular\r\n    .module('nzbhydraApp')\r\n    .directive('onFinishRender', onFinishRender);\r\n\r\nfunction onFinishRender($timeout) {\r\n    function linkFunction(scope, element, attr) {\r\n        \r\n        if (scope.$last === true) {\r\n                $timeout(function () {\r\n                    scope.$evalAsync(attr.onFinishRender);\r\n                });\r\n            }\r\n    }\r\n\r\n    return {\r\n        link: linkFunction\r\n    }\r\n}\r\nonFinishRender.$inject = [\"$timeout\"];","angular\r\n    .module('nzbhydraApp')\r\n    .directive('indexerStatuses', indexerStatuses);\r\n\r\nfunction indexerStatuses() {\r\n    return {\r\n        templateUrl: 'static/html/directives/indexer-statuses.html',\r\n        controller: ['$scope', '$http', controller]\r\n    };\r\n\r\n    function controller($scope, $http) {\r\n        \r\n        getIndexerStatuses();\r\n        \r\n        function getIndexerStatuses() {\r\n            $http.get(\"internalapi/getindexerstatuses\").success(function (response) {\r\n                $scope.indexerStatuses = response.indexerStatuses;\r\n            });\r\n        }\r\n        \r\n        $scope.isInPast = function (timestamp) {\r\n            return timestamp * 1000 < (new Date).getTime();\r\n        };\r\n        \r\n        $scope.enable = function(indexerName) {\r\n            $http.get(\"internalapi/enableindexer\", {params: {name: indexerName}}).then(function(response){\r\n                $scope.indexerStatuses = response.data.indexerStatuses;\r\n            });\r\n        }\r\n\r\n    }\r\n}\r\n\r\nangular\r\n    .module('nzbhydraApp')\r\n    .filter('formatDate', formatDate);\r\n\r\nfunction formatDate(dateFilter) {\r\n    return function(timestamp, hidePast) {\r\n        if (timestamp) {\r\n            if (timestamp * 1000 < (new Date).getTime() && hidePast) {\r\n                return \"\"; //\r\n            }\r\n            \r\n            var t = timestamp * 1000;\r\n            t = dateFilter(t, 'yyyy-MM-dd HH:mm:ss Z');\r\n            return t;\r\n        } else {\r\n            return \"\";\r\n        }\r\n    }\r\n}\r\nformatDate.$inject = [\"dateFilter\"];","angular\r\n    .module('nzbhydraApp').directive('focusOn', focusOn);\r\n\r\nfunction focusOn() {\r\n    return directive;\r\n    function directive(scope, elem, attr) {\r\n        scope.$on('focusOn', function (e, name) {\r\n            if (name === attr.focusOn) {\r\n                elem[0].focus();\r\n            }\r\n        });\r\n    }\r\n}\r\n","angular\r\n    .module('nzbhydraApp')\r\n    .directive('downloadHistory', downloadHistory);\r\n\r\nfunction downloadHistory() {\r\n    return {\r\n        templateUrl: 'static/html/directives/download-history.html',\r\n        controller: ['$scope', '$http', controller],\r\n        scope: {}\r\n    };\r\n\r\n    function controller($scope, $http) {\r\n        $scope.type = \"All\";\r\n        $scope.limit = 100;\r\n        $scope.pagination = {\r\n            current: 1\r\n        };\r\n\r\n        $scope.changeType = function (type) {\r\n            $scope.type = type;\r\n            getDownloadsPage($scope.pagination.current);\r\n        };\r\n\r\n        getDownloadsPage(1);\r\n\r\n        $scope.pageChanged = function (newPage) {\r\n            getDownloadsPage(newPage);\r\n        };\r\n        \r\n        function getDownloadsPage(pageNumber) {\r\n            $http.get(\"internalapi/getnzbdownloads\", {params:{page: pageNumber, limit: $scope.limit, type: $scope.type}}).success(function (response) {\r\n                $scope.nzbDownloads = response.nzbDownloads;\r\n                $scope.totalDownloads = response.totalDownloads;\r\n            });\r\n        }\r\n\r\n\r\n    }\r\n}","angular\r\n    .module('nzbhydraApp')\r\n    .directive('cfgFormEntry', cfgFormEntry);\r\n\r\nfunction cfgFormEntry() {\r\n    return {\r\n        templateUrl: 'static/html/directives/cfg-form-entry.html',\r\n        require: [\"^title\", \"^cfg\"],\r\n        scope: {\r\n            title: \"@\",\r\n            cfg: \"=\",\r\n            help: \"@\",\r\n            type: \"@?\",\r\n            options: \"=?\"\r\n        },\r\n        controller: [\"$scope\", \"$element\", \"$attrs\", function ($scope, $element, $attrs) {\r\n            $scope.type = angular.isDefined($scope.type) ? $scope.type : 'text';\r\n            $scope.options = angular.isDefined($scope.type) ? $scope.$eval($attrs.options) : [];\r\n        }]\r\n    };\r\n}","angular\r\n    .module('nzbhydraApp')\r\n    .directive('addableNzb', addableNzb);\r\n\r\nfunction addableNzb() {\r\n    controller.$inject = [\"$scope\", \"ConfigService\", \"NzbDownloadService\", \"growl\"];\r\n    return {\r\n        templateUrl: 'static/html/directives/addable-nzb.html',\r\n        require: ['^indexerguid', '^title', '^indexer', '^dbsearchid'],\r\n        scope: {\r\n            indexerguid: \"=\",\r\n            title: \"=\",\r\n            indexer: \"=\",\r\n            dbsearchid: \"=\"\r\n        },\r\n        controller: controller\r\n    };\r\n\r\n    function controller($scope, ConfigService, NzbDownloadService, growl) {\r\n        $scope.classname = \"\";\r\n        \r\n        ConfigService.getSafe().then(function (settings) {\r\n            $scope.downloader = settings.downloader.downloader;\r\n            if ($scope.downloader != \"none\") {\r\n                $scope.enabled = true;\r\n                $scope.classname = $scope.downloader == \"sabnzbd\" ? \"sabnzbd\" : \"nzbget\";\r\n            } else {\r\n                $scope.enabled = false;\r\n            }\r\n            \r\n        });\r\n        \r\n        $scope.add = function() {\r\n            $scope.classname = \"nzb-spinning\";\r\n            NzbDownloadService.download([{\"indexerguid\": $scope.indexerguid, \"title\": $scope.title, \"indexer\": $scope.indexer, \"dbsearchid\": $scope.dbsearchid}]).then(function (response) {\r\n                if (response.data.success) {\r\n                    $scope.classname = $scope.downloader == \"sabnzbd\" ? \"sabnzbd-success\" : \"nzbget-success\";\r\n                } else {\r\n                    $scope.classname = $scope.downloader == \"sabnzbd\" ? \"sabnzbd-error\" : \"nzbget-error\";\r\n                    growl.error(\"Unable to add NZB. Make sure the downloader is running and properly configured.\");\r\n                }\r\n            }, function() {\r\n                $scope.classname = $scope.downloader == \"sabnzbd\" ? \"sabnzbd-error\" : \"nzbget-error\";\r\n                growl.error(\"An unexpected error occurred while trying to contact NZB Hydra or add the NZB.\");\r\n            })\r\n        };\r\n\r\n    }\r\n}\r\n\r\n","angular\r\n    .module('nzbhydraApp')\r\n    .factory('UpdateService', UpdateService);\r\n\r\nfunction UpdateService($http, growl, blockUI, RestartService) {\r\n    \r\n    return {\r\n        update: update\r\n    };\r\n\r\n    function update() {\r\n        blockUI.start(\"Updating. Please stand by...\");\r\n        $http.get(\"internalapi/update\").then(function (data) {\r\n                if (data.data.success) {\r\n                    RestartService.restart(\"Update complete.\");\r\n                } else {\r\n                    blockUI.reset();\r\n                    growl.info(\"An error occurred while updating. Please check the logs.\");\r\n                }\r\n            },\r\n            function () {\r\n                blockUI.reset();\r\n                growl.info(\"An error occurred while updating. Please check the logs.\");\r\n            });\r\n    }\r\n}\r\nUpdateService.$inject = [\"$http\", \"growl\", \"blockUI\", \"RestartService\"];\r\n","angular\r\n    .module('nzbhydraApp')\r\n    .controller('UpdateFooterController', UpdateFooterController);\r\n\r\nfunction UpdateFooterController($scope, $http, UpdateService) {\r\n    \r\n    $http.get(\"internalapi/get_versions\").then(function(data) {\r\n        console.log(data);\r\n        $scope.currentVersion = data.data.currentVersion;\r\n        $scope.repVersion = data.data.repVersion;\r\n        $scope.updateAvailable = data.data.updateAvailable;\r\n    });\r\n\r\n    $scope.update = function () {\r\n        UpdateService.update();\r\n    }\r\n\r\n}\r\nUpdateFooterController.$inject = [\"$scope\", \"$http\", \"UpdateService\"];\r\n","angular\r\n    .module('nzbhydraApp')\r\n    .factory('StatsService', StatsService);\r\n\r\nfunction StatsService($http) {\r\n    \r\n    return {\r\n        get: getStats\r\n    };\r\n\r\n    function getStats() {\r\n            return $http.get(\"internalapi/getstats\").success(function (response) {\r\n               return response.data;\r\n            });\r\n\r\n    }\r\n\r\n}\r\nStatsService.$inject = [\"$http\"];","angular\r\n    .module('nzbhydraApp')\r\n    .controller('StatsController', StatsController);\r\n\r\nfunction StatsController($scope, stats, $state) {\r\n\r\n    stats = stats.data;\r\n    $scope.nzbDownloads = null;\r\n    $scope.avgResponseTimes = stats.avgResponseTimes;\r\n    $scope.avgIndexerSearchResultsShares = stats.avgIndexerSearchResultsShares;\r\n    $scope.avgIndexerAccessSuccesses = stats.avgIndexerAccessSuccesses;\r\n\r\n\r\n    $scope.tabs = [\r\n        {\r\n            active: false,\r\n            state: 'stats'\r\n        },\r\n        {\r\n            active: false,\r\n            state: 'stats.indexers'\r\n        },\r\n        {\r\n            active: false,\r\n            state: 'stats.searches'\r\n        },\r\n        {\r\n            active: false,\r\n            state: 'stats.downloads'\r\n        }\r\n    ];\r\n\r\n\r\n    for (var i = 0; i < $scope.tabs.length; i++) {\r\n        if ($state.is($scope.tabs[i].state)) {\r\n            $scope.tabs[i].active = true;\r\n        }\r\n    }\r\n    \r\n\r\n    $scope.goToState = function (index) {\r\n        $state.go($scope.tabs[index].state);\r\n        \r\n    }\r\n\r\n\r\n}\r\nStatsController.$inject = [\"$scope\", \"stats\", \"$state\"];\r\n","angular\r\n    .module('nzbhydraApp')\r\n    .factory('SearchService', SearchService);\r\n\r\nfunction SearchService($http) {\r\n\r\n\r\n    var lastExecutedQuery;\r\n\r\n    var service = {search: search, loadMore: loadMore};\r\n    return service;\r\n\r\n    function search(category, query, tmdbid, title, tvdbid, season, episode, minsize, maxsize, minage, maxage, indexers) {\r\n        console.log(\"Category: \" + category);\r\n        var uri;\r\n        if (category.indexOf(\"Movies\") > -1 || (category.indexOf(\"20\") == 0)) {\r\n            console.log(\"Search for movies\");\r\n            uri = new URI(\"internalapi/moviesearch\");\r\n            if (!_.isUndefined(tmdbid)) {\r\n                console.log(\"moviesearch per tmdbid\");\r\n                uri.addQuery(\"tmdbid\", tmdbid);\r\n                uri.addQuery(\"title\", title);\r\n            } else {\r\n                console.log(\"moviesearch per query\");\r\n                uri.addQuery(\"query\", query);\r\n            }\r\n\r\n        } else if (category.indexOf(\"TV\") > -1 || (category.indexOf(\"50\") == 0)) {\r\n            console.log(\"Search for shows\");\r\n            uri = new URI(\"internalapi/tvsearch\");\r\n            if (!_.isUndefined(tvdbid)) {\r\n                uri.addQuery(\"tvdbid\", tvdbid);\r\n                uri.addQuery(\"title\", title);\r\n            } else {\r\n                console.log(\"tvsearch per query\");\r\n                uri.addQuery(\"query\", query);\r\n            }\r\n\r\n            if (!_.isUndefined(season)) {\r\n                uri.addQuery(\"season\", season);\r\n            }\r\n            if (!_.isUndefined(episode)) {\r\n                uri.addQuery(\"episode\", episode);\r\n            }\r\n        } else {\r\n            console.log(\"Search for all\");\r\n            uri = new URI(\"internalapi/search\");\r\n            uri.addQuery(\"query\", query);\r\n        }\r\n\r\n        if (_.isNumber(minsize)) {\r\n            uri.addQuery(\"minsize\", minsize);\r\n        }\r\n        if (_.isNumber(maxsize)) {\r\n            uri.addQuery(\"maxsize\", maxsize);\r\n        }\r\n        if (_.isNumber(minage)) {\r\n            uri.addQuery(\"minage\", minage);\r\n        }\r\n        if (_.isNumber(maxage)) {\r\n            uri.addQuery(\"maxage\", maxage);\r\n        }\r\n        if (!angular.isUndefined(indexers)) {\r\n            uri.addQuery(\"indexers\", decodeURIComponent(indexers));\r\n        }\r\n        \r\n\r\n        uri.addQuery(\"category\", category);\r\n\r\n        console.log(\"Calling \" + uri);\r\n        lastExecutedQuery = uri;\r\n        return $http.get(uri).then(processData);\r\n\r\n    }\r\n\r\n    function loadMore(offset) {\r\n        lastExecutedQuery.removeQuery(\"offset\");\r\n        lastExecutedQuery.addQuery(\"offset\", offset);\r\n\r\n        console.log(\"Calling \" + lastExecutedQuery);\r\n        return $http.get(lastExecutedQuery).then(processData);\r\n    }\r\n\r\n    function processData(response) {\r\n        var results = response.data.results;\r\n        var indexersearches = response.data.indexersearches;\r\n        var total = response.data.total;\r\n        var resultsCount = results.length;\r\n\r\n\r\n        //Sum up response times of indexers from individual api accesses\r\n        //TODO: Move this to search result controller because we need to update it every time we loaded more results\r\n        _.each(indexersearches, function (ps) {\r\n            ps.averageResponseTime = _.reduce(ps.api_accesses, function (memo, rp) {\r\n                return memo + rp.response_time;\r\n            }, 0);\r\n            ps.averageResponseTime = ps.averageResponseTime / ps.api_accesses.length;\r\n        });\r\n        \r\n\r\n        return {\"results\": results, \"indexersearches\": indexersearches, \"total\": total, \"resultsCount\": resultsCount}\r\n    }\r\n}\r\nSearchService.$inject = [\"$http\"];","angular\r\n    .module('nzbhydraApp')\r\n    .controller('SearchResultsController', SearchResultsController);\r\n\r\n//SearchResultsController.$inject = ['blockUi'];\r\nfunction SearchResultsController($stateParams, $scope, $q, $timeout, blockUI, SearchService,growl, NzbDownloadService) {\r\n\r\n    $scope.sortPredicate = \"epoch\";\r\n    $scope.sortReversed = true;\r\n    $scope.limitTo = 100;\r\n    $scope.offset = 0;\r\n    //Handle incoming data\r\n    $scope.indexersearches = $stateParams.indexersearches;\r\n    $scope.indexerDisplayState = []; //Stores if a indexer's results should be displayed or not\r\n    $scope.indexerResultsInfo = {}; //Stores information about the indexer's results like how many we already retrieved\r\n    $scope.groupExpanded = {};\r\n    $scope.doShowDuplicates = false;\r\n    $scope.selected = [];\r\n    \r\n    $scope.countFilteredOut = 0;\r\n\r\n    //Initially set visibility of all found indexers to true, they're needed for initial filtering / sorting\r\n    _.forEach($scope.indexersearches, function (ps) {\r\n        $scope.indexerDisplayState[ps.indexer.toLowerCase()] = true;\r\n    });\r\n\r\n    _.forEach($scope.indexersearches, function (ps) {\r\n        $scope.indexerResultsInfo[ps.indexer.toLowerCase()] = {loadedResults: ps.loaded_results};\r\n    });\r\n    \r\n\r\n    //Process results\r\n    $scope.results = $stateParams.results;\r\n    $scope.total = $stateParams.total;\r\n    $scope.resultsCount = $stateParams.resultsCount;\r\n    $scope.filteredResults = sortAndFilter($scope.results);\r\n    stopBlocking();\r\n\r\n\r\n    //Returns the content of the property (defined by the current sortPredicate) of the first group element \r\n    $scope.firstResultPredicate = firstResultPredicate;\r\n    function firstResultPredicate(item) {\r\n        return item[0][$scope.sortPredicate];\r\n    }\r\n\r\n    //Returns the unique group identifier which allows angular to keep track of the grouped search results even after filtering, making filtering by indexers a lot faster (albeit still somewhat slow...)  \r\n    $scope.groupId = groupId;\r\n    function groupId(item) {\r\n        return item[0][0].guid;\r\n    }\r\n\r\n    //Block the UI and return after timeout. This way we make sure that the blocking is done before angular starts updating the model/view. There's probably a better way to achieve that?\r\n    function startBlocking(message) {\r\n        var deferred = $q.defer();\r\n        blockUI.start(message);\r\n        $timeout(function () {\r\n            deferred.resolve();\r\n        }, 100);\r\n        return deferred.promise;\r\n    }\r\n\r\n    //Set sorting according to the predicate. If it's the same as the old one, reverse, if not sort by the given default (so that age is descending, name ascending, etc.)\r\n    //Sorting (and filtering) are really slow (about 2 seconds for 1000 results from 5 indexers) but I haven't found any way of making it faster, apart from the tracking \r\n    $scope.setSorting = setSorting;\r\n    function setSorting(predicate, reversedDefault) {\r\n        startBlocking(\"Sorting / filtering...\").then(function () {\r\n\r\n            if (predicate == $scope.sortPredicate) {\r\n                $scope.sortReversed = !$scope.sortReversed;\r\n            } else {\r\n                $scope.sortReversed = reversedDefault;\r\n            }\r\n            $scope.sortPredicate = predicate;\r\n            $scope.filteredResults = sortAndFilter($scope.results);\r\n            blockUI.reset();\r\n        });\r\n    }\r\n\r\n\r\n    \r\n    function sortAndFilter(results) {\r\n        $scope.countFilteredOut = 0;\r\n        function filterByAgeAndSize(item) {\r\n            var filterOut = !(_.isNumber($stateParams.minsize) && item.size / 1024 / 1024 < $stateParams.minsize)\r\n                && !(_.isNumber($stateParams.maxsize) && item.size / 1024 / 1024 > $stateParams.maxsize)\r\n                && !(_.isNumber($stateParams.minage) && item.age_days < $stateParams.minage)\r\n                && !(_.isNumber($stateParams.maxage) && item.age_days > $stateParams.maxage);\r\n            if (!filterOut) {\r\n                $scope.countFilteredOut++;\r\n            }\r\n            return filterOut;\r\n        }\r\n        \r\n        \r\n        function getItemIndexerDisplayState(item) {\r\n            return $scope.indexerDisplayState[item.indexer.toLowerCase()];\r\n        }\r\n\r\n        function getCleanedTitle(element) {\r\n            return element.title.toLowerCase().replace(/[\\s\\-\\._]/ig, \"\");\r\n        }\r\n\r\n        function createSortedHashgroups(titleGroup) {\r\n\r\n            function createHashGroup(hashGroup) {\r\n                //Sorting hash group's contents should not matter for size and age and title but might for category (we might remove this, it's probably mostly unnecessary)\r\n                var sortedHashGroup = _.sortBy(hashGroup, function (item) {\r\n                    var sortPredicateValue = item[$scope.sortPredicate];\r\n                    return $scope.sortReversed ? -sortPredicateValue : sortPredicateValue;\r\n                });\r\n                //Now sort the hash group by indexer score (inverted) so that the result with the highest indexer score is shown on top (or as the only one of a hash group if it's collapsed)\r\n                sortedHashGroup = _.sortBy(sortedHashGroup, function (item) {\r\n                    return item.indexerscore * -1;\r\n                });\r\n                return sortedHashGroup;\r\n            }\r\n\r\n            function getHashGroupFirstElementSortPredicate(hashGroup) {\r\n                var sortPredicateValue = hashGroup[0][$scope.sortPredicate];\r\n                return $scope.sortReversed ? -sortPredicateValue : sortPredicateValue;\r\n            }\r\n\r\n            return _.chain(titleGroup).groupBy(\"hash\").map(createHashGroup).sortBy(getHashGroupFirstElementSortPredicate).value();\r\n        }\r\n\r\n        function getTitleGroupFirstElementsSortPredicate(titleGroup) {\r\n            var sortPredicateValue = titleGroup[0][0][$scope.sortPredicate];\r\n            return $scope.sortReversed ? -sortPredicateValue : sortPredicateValue;\r\n        }\r\n\r\n        var filtered = _.chain(results)\r\n            //Remove elements of which the indexer is currently hidden    \r\n            .filter(getItemIndexerDisplayState)\r\n            //and which were not filtered by the indexers (because they don't support queries with min/max size/age)\r\n            .filter(filterByAgeAndSize)\r\n            //Make groups of results with the same title    \r\n            .groupBy(getCleanedTitle)\r\n            //For every title group make subgroups of duplicates and sort the group    \r\n            .map(createSortedHashgroups)\r\n            //And then sort the title group using its first hashgroup's first item (the group itself is already sorted and so are the hash groups)    \r\n            .sortBy(getTitleGroupFirstElementsSortPredicate)\r\n            .value();\r\n        if ($scope.countFilteredOut > 0) {\r\n            growl.info(\"Filtered \" + $scope.countFilteredOut + \" of the retrieved results\");\r\n        }\r\n        return filtered;\r\n\r\n    }\r\n\r\n    $scope.toggleTitlegroupExpand = function toggleTitlegroupExpand(titleGroup) {\r\n        $scope.groupExpanded[titleGroup[0][0].title] = !$scope.groupExpanded[titleGroup[0][0].title];\r\n        $scope.groupExpanded[titleGroup[0][0].hash] = !$scope.groupExpanded[titleGroup[0][0].hash];\r\n    };\r\n\r\n\r\n//Clear the blocking\r\n    $scope.stopBlocking = stopBlocking;\r\n    function stopBlocking() {\r\n        blockUI.reset();\r\n    }\r\n\r\n    $scope.loadMore = loadMore;\r\n    function loadMore() {\r\n        console.log(\"Loading more result withs offset \" + $scope.resultsCount);\r\n\r\n        startBlocking(\"Loading more results...\").then(function () {\r\n            SearchService.loadMore($scope.resultsCount).then(function (data) {\r\n                console.log(\"Returned more results:\");\r\n                console.log(data.results);\r\n                console.log($scope.results);\r\n                console.log(\"Total: \" + data.total);\r\n                $scope.results = $scope.results.concat(data.results);\r\n                $scope.filteredResults = sortAndFilter($scope.results);\r\n                $scope.total = data.total;\r\n                $scope.resultsCount += data.resultsCount;\r\n                console.log(\"Results count: \" + $scope.resultsCount);\r\n                console.log(\"Total results in $scope.results: \" + $scope.results.length);\r\n\r\n                stopBlocking();\r\n            });\r\n        });\r\n    }\r\n\r\n\r\n//Filters the results according to new visibility settings.\r\n    $scope.toggleIndexerDisplay = toggleIndexerDisplay;\r\n    function toggleIndexerDisplay(indexer) {\r\n        $scope.indexerDisplayState[indexer.toLowerCase()] = $scope.indexerDisplayState[indexer.toLowerCase()]; \r\n        startBlocking(\"Filtering. Sorry...\").then(function () {\r\n            $scope.filteredResults = sortAndFilter($scope.results);\r\n        }).then(function () {\r\n            stopBlocking();\r\n        });\r\n    }\r\n\r\n    $scope.countResults = countResults;\r\n    function countResults() {\r\n        return $scope.results.length;\r\n    }\r\n\r\n    $scope.downloadSelected = downloadSelected;\r\n    function downloadSelected() {\r\n\r\n        if (angular.isUndefined($scope.selected) || $scope.selected.length == 0) {\r\n            growl.info(\"You should select at least one result...\");\r\n        } else {\r\n\r\n            var values = _.map($scope.selected, function (value) {\r\n                return {\"indexerguid\": value.indexerguid, \"title\": value.title, \"indexer\": value.indexer, \"dbsearchid\": value.dbsearchid}\r\n            });\r\n\r\n            console.log(values);\r\n            NzbDownloadService.download(values).then(function (response) {\r\n                if (response.data.success) {\r\n                    growl.info(\"Successfully added \" + response.data.added + \" of \" + response.data.of + \" NZBs\");\r\n                } else {\r\n                    growl.error(\"Error while adding NZBs\");\r\n                }\r\n            }, function () {\r\n                growl.error(\"Error while adding NZBs\");\r\n            });\r\n        }\r\n    }\r\n    \r\n    $scope.invertSelection = function invertSelection() {\r\n        $scope.selected = _.difference($scope.results, $scope.selected);\r\n    }\r\n\r\n}\r\nSearchResultsController.$inject = [\"$stateParams\", \"$scope\", \"$q\", \"$timeout\", \"blockUI\", \"SearchService\", \"growl\", \"NzbDownloadService\"];","angular\r\n    .module('nzbhydraApp')\r\n    .controller('SearchController', SearchController);\r\n\r\nfunction SearchController($scope, $http, $stateParams, $state, SearchService, focus, ConfigService, blockUI) {\r\n    \r\n    function getNumberOrUndefined(number) {\r\n        if (_.isUndefined(number) || _.isNaN(number) || number == \"\") {\r\n            return undefined;\r\n        }\r\n        number = parseInt(number);\r\n        if (_.isNumber(number)) {\r\n            return number;\r\n        } else {\r\n            return undefined;\r\n        }\r\n    }\r\n\r\n    //Fill the form with the search values we got from the state params (so that their values are the same as in the current url)\r\n    $scope.mode = $stateParams.mode;\r\n    \r\n    $scope.category = (_.isUndefined($stateParams.category) || $stateParams.category == \"\") ? \"All\" : $stateParams.category;\r\n    $scope.tmdbid = $stateParams.tmdbid;\r\n    $scope.tvdbid = $stateParams.tvdbid;\r\n    $scope.rid = $stateParams.rid;\r\n    $scope.title = $stateParams.title;\r\n    $scope.season = $stateParams.season;\r\n    $scope.episode = $stateParams.episode;\r\n    $scope.query = $stateParams.query;\r\n    $scope.minsize = getNumberOrUndefined($stateParams.minsize);\r\n    $scope.maxsize = getNumberOrUndefined($stateParams.maxsize);\r\n    $scope.minage = getNumberOrUndefined($stateParams.minage);\r\n    $scope.maxage = getNumberOrUndefined($stateParams.maxage);\r\n    if (!_.isUndefined($scope.title) && _.isUndefined($scope.query)) {\r\n        $scope.query = $scope.title;\r\n    }\r\n    if (!angular.isUndefined($stateParams.indexers)) {\r\n        $scope.indexers = decodeURIComponent($stateParams.indexers).split(\"|\");\r\n    }\r\n\r\n    $scope.showIndexers = {};\r\n\r\n    var safeConfig;\r\n\r\n\r\n    $scope.typeAheadWait = 300;\r\n    $scope.selectedItem = \"\";\r\n    $scope.autocompleteLoading = false;\r\n    $scope.isAskById = ($scope.category.indexOf(\"TV\") > -1 || $scope.category.indexOf(\"Movies\") > -1 ); //If true a check box will be shown asking the user if he wants to search by ID \r\n    $scope.isById = {value: true}; //If true the user wants to search by id so we enable autosearch. Was unable to achieve this using a simple boolean\r\n    $scope.availableIndexers = [];\r\n    $scope.autocompleteClass = \"autocompletePosterMovies\";\r\n\r\n    $scope.toggle = function (searchCategory) {\r\n        $scope.category = searchCategory;\r\n\r\n        //Show checkbox to ask if the user wants to search by ID (using autocomplete)\r\n        $scope.isAskById = ($scope.category.indexOf(\"TV\") > -1 || $scope.category.indexOf(\"Movies\") > -1 );\r\n\r\n        focus('focus-query-box');\r\n        $scope.query = \"\";\r\n\r\n        if (safeConfig.searching.categorysizes.enable_category_sizes) {\r\n            var min = safeConfig.searching.categorysizes[(searchCategory + \" min\").toLowerCase().replace(\" \", \"\")];\r\n            var max = safeConfig.searching.categorysizes[(searchCategory + \" max\").toLowerCase().replace(\" \", \"\")];\r\n            if (_.isNumber(min)) {\r\n                $scope.minsize = min;\r\n            } else {\r\n                $scope.minsize = \"\";\r\n            }\r\n            if (_.isNumber(max)) {\r\n                $scope.maxsize = max;\r\n            } else {\r\n                $scope.maxsize = \"\";\r\n            }\r\n        }\r\n    };\r\n\r\n\r\n    // Any function returning a promise object can be used to load values asynchronously\r\n    $scope.getAutocomplete = function (val) {\r\n        $scope.autocompleteLoading = true;\r\n        //Expected model returned from API:\r\n        //label: What to show in the results\r\n        //title: Will be used for file search\r\n        //value: Will be used as extraInfo (ttid oder tvdb id)\r\n        //poster: url of poster to show\r\n\r\n        //Don't use autocomplete if checkbox is disabled\r\n        if (!$scope.isById.value) {\r\n            return {};\r\n        }\r\n\r\n        if ($scope.category.indexOf(\"Movies\") > -1) {\r\n            return $http.get('internalapi/autocomplete?type=movie', {\r\n                params: {\r\n                    input: val\r\n                }\r\n            }).then(function (response) {\r\n                $scope.autocompleteLoading = false;\r\n                return response.data.results;\r\n            });\r\n        } else if ($scope.category.indexOf(\"TV\") > -1) {\r\n\r\n            return $http.get('internalapi/autocomplete?type=tv', {\r\n                params: {\r\n                    input: val\r\n                }\r\n            }).then(function (response) {\r\n                $scope.autocompleteLoading = false;\r\n                return response.data.results;\r\n            });\r\n        } else {\r\n            return {};\r\n        }\r\n    };\r\n    \r\n\r\n    $scope.startSearch = function () {\r\n        blockUI.start(\"Searching...\");\r\n        var indexers = angular.isUndefined($scope.indexers) ? undefined : $scope.indexers.join(\"|\");\r\n        SearchService.search($scope.category, $scope.query, $stateParams.tmdbid, $scope.title, $scope.tvdbid, $scope.season, $scope.episode, $scope.minsize, $scope.maxsize, $scope.minage, $scope.maxage, indexers).then(function (searchResult) {\r\n            $state.go(\"search.results\", {\r\n                results: searchResult.results,\r\n                indexersearches: searchResult.indexersearches,\r\n                total: searchResult.total,\r\n                resultsCount: searchResult.resultsCount,\r\n                minsize: $scope.minsize,\r\n                maxsize: $scope.maxsize,\r\n                minage: $scope.minage,\r\n                maxage: $scope.maxage\r\n            }, {\r\n                inherit: true\r\n            });\r\n            $scope.tmdbid = undefined;\r\n            $scope.tvdbid = undefined;\r\n        });\r\n    };\r\n    \r\n    function getSelectedIndexers() {\r\n        var activatedIndexers = _.filter($scope.availableIndexers).filter(function (indexer) {\r\n            return indexer.activated ;\r\n        });\r\n            return _.pluck(activatedIndexers, \"name\").join(\"|\");\r\n    }\r\n\r\n\r\n    $scope.goToSearchUrl = function () {\r\n        var stateParams = {};\r\n        if ($scope.category.indexOf(\"Movies\") > -1) {\r\n            stateParams.mode = \"moviesearch\";\r\n            stateParams.title = $scope.title;\r\n            stateParams.mode = \"moviesearch\";\r\n        } else if ($scope.category.indexOf(\"TV\") > -1) {\r\n            stateParams.mode = \"tvsearch\";\r\n            stateParams.title = $scope.title;\r\n        } else if ($scope.category == \"Ebook\") {\r\n            stateParams.mode = \"ebook\";\r\n        } else {\r\n            stateParams.mode = \"search\";\r\n        }\r\n        \r\n        stateParams.tmdbid = $scope.tmdbid;\r\n        stateParams.tvdbid = $scope.tvdbid;\r\n        stateParams.title = $scope.title;\r\n        stateParams.season = $scope.season;\r\n        stateParams.episode = $scope.episode;\r\n        stateParams.query = $scope.query;\r\n        stateParams.minsize = $scope.minsize;\r\n        stateParams.maxsize = $scope.maxsize;\r\n        stateParams.minage = $scope.minage;\r\n        stateParams.maxage = $scope.maxage;\r\n        stateParams.category = $scope.category;\r\n        stateParams.indexers = encodeURIComponent(getSelectedIndexers());\r\n        \r\n        $state.go(\"search\", stateParams, {inherit: false, notify: true, reload: true});\r\n    };\r\n\r\n\r\n    $scope.selectAutocompleteItem = function ($item) {\r\n        $scope.selectedItem = $item;\r\n        $scope.title = $item.title;\r\n        if ($scope.category.indexOf(\"Movies\") > -1) {\r\n            $scope.tmdbid = $item.value;\r\n        } else if ($scope.category.indexOf(\"TV\") > -1) {\r\n            $scope.tvdbid = $item.value;\r\n        }\r\n        $scope.query = \"\";\r\n        $scope.goToSearchUrl();\r\n    };\r\n    \r\n    $scope.startQuerySearch = function() {\r\n        //Reset values because they might've been set from the last search\r\n        $scope.title = undefined;\r\n        $scope.tmdbid = undefined;\r\n        $scope.tvdbid = undefined;\r\n        $scope.goToSearchUrl();\r\n    };\r\n\r\n\r\n    $scope.autocompleteActive = function () {\r\n        return ($scope.category.indexOf(\"TV\") > -1) || ($scope.category.indexOf(\"Movies\") > -1)\r\n    };\r\n\r\n    $scope.seriesSelected = function () {\r\n        return ($scope.category.indexOf(\"TV\") > -1);\r\n    };\r\n    \r\n    $scope.toggleIndexer = function(indexer) {\r\n        $scope.indexers[indexer] = !$scope.indexers[indexer]\r\n    };\r\n    \r\n\r\n    function isIndexerPreselected(indexer) {\r\n        if (angular.isUndefined($scope.indexers)) {\r\n            return indexer.preselect;\r\n        } else {\r\n            return _.contains($scope.indexers, indexer.name);\r\n        }\r\n        \r\n    }\r\n\r\n    ConfigService.getSafe().then(function (cfg) {\r\n        safeConfig = cfg;\r\n        $scope.availableIndexers = _.chain(cfg.indexers).filter(function (indexer) {\r\n            return indexer.enabled && indexer.showOnSearch;\r\n        }).sortBy(\"name\")\r\n            .map(function (indexer) {\r\n            return {name: indexer.name, activated: isIndexerPreselected(indexer)};\r\n        }).value();\r\n        \r\n    });\r\n\r\n    if ($scope.mode) {\r\n        console.log(\"Starting search in newly loaded search controller\");\r\n        $scope.startSearch();\r\n    }\r\n\r\n\r\n    \r\n\r\n\r\n}\r\nSearchController.$inject = [\"$scope\", \"$http\", \"$stateParams\", \"$state\", \"SearchService\", \"focus\", \"ConfigService\", \"blockUI\"];\r\n","angular\r\n    .module('nzbhydraApp')\r\n    .factory('RestartService', RestartService);\r\n\r\nfunction RestartService(blockUI, $timeout, $window) {\r\n\r\n    return {\r\n        restart: restart\r\n    };\r\n\r\n    function restart(message) {\r\n        message = angular.isUndefined ? \"\" : \" \";\r\n        \r\n        blockUI.start(message  + \"Restarting. Will reload page in 5 seconds...\");\r\n        $timeout(function () {\r\n            blockUI.start(message  + \"Restarting. Will reload page in 4 seconds...\");\r\n            $timeout(function () {\r\n                blockUI.start(message  +  \"Restarting. Will reload page in 3 seconds...\");\r\n                $timeout(function () {\r\n                    blockUI.start(message  + \"Restarting. Will reload page in 2 seconds...\");\r\n                    $timeout(function () {\r\n                        blockUI.start(message + \"Restarting. Will reload page in 1 second...\");\r\n                        $timeout(function () {\r\n                            blockUI.start(\"Reloading page...\");\r\n                            $window.location.reload();\r\n                        }, 1000);\r\n                    }, 1000);\r\n                }, 1000);\r\n            }, 1000);\r\n        }, 1000);\r\n    }\r\n}\r\nRestartService.$inject = [\"blockUI\", \"$timeout\", \"$window\"];\r\n","angular\r\n    .module('nzbhydraApp')\r\n    .factory('NzbDownloadService', NzbDownloadService);\r\n\r\nfunction NzbDownloadService($http, ConfigService, CategoriesService) {\r\n    \r\n    var service = {\r\n        download: download \r\n    };\r\n    \r\n    return service;\r\n    \r\n\r\n\r\n    function sendNzbAddCommand(items, category) {\r\n        console.log(\"Now add nzb with category \" + category);        \r\n        return $http.put(\"internalapi/addnzbs\", {items: angular.toJson(items), category: category});\r\n    }\r\n\r\n    function download (items) {\r\n        return ConfigService.getSafe().then(function (settings) {\r\n\r\n            var category;\r\n            if (settings.downloader.downloader == \"nzbget\") {\r\n                category = settings.downloader.nzbget.defaultCategory\r\n            } else {\r\n                category = settings.downloader.sabnzbd.defaultCategory\r\n            }\r\n\r\n            if (_.isUndefined(category) || category == \"\" || category == null) {\r\n                return CategoriesService.openCategorySelection().then(function (category) {\r\n                    return sendNzbAddCommand(items, category)\r\n                }, function(error) {\r\n                    throw error;\r\n                });\r\n            } else {\r\n                return sendNzbAddCommand(items, category)\r\n            }\r\n\r\n        });\r\n\r\n\r\n    }\r\n\r\n    \r\n}\r\nNzbDownloadService.$inject = [\"$http\", \"ConfigService\", \"CategoriesService\"];\r\n\r\n","angular\r\n    .module('nzbhydraApp')\r\n    .factory('ModalService', ModalService);\r\n\r\nfunction ModalService($uibModal) {\r\n    \r\n    return {\r\n        open: openModal\r\n    };\r\n    \r\n    function openModal(headline, message, ok, cancel) {\r\n        var modalInstance = $uibModal.open({\r\n            templateUrl: 'static/html/modal.html',\r\n            controller: 'ModalInstanceCtrl',\r\n            size: 'md',\r\n            resolve: {\r\n                headline: function () {\r\n                    return headline\r\n                },\r\n                message: function(){ return message},\r\n                ok: function() {\r\n                    return ok;\r\n                },\r\n                cancel: function() {\r\n                    return cancel;\r\n                }\r\n            }\r\n        });\r\n\r\n        modalInstance.result.then(function() {\r\n            \r\n        }, function() {\r\n            cancel();\r\n        });\r\n    }\r\n    \r\n}\r\nModalService.$inject = [\"$uibModal\"];\r\n\r\nangular\r\n    .module('nzbhydraApp')\r\n    .controller('ModalInstanceCtrl', ModalInstanceCtrl);\r\n\r\nfunction ModalInstanceCtrl($scope, $uibModalInstance, headline, message, ok, cancel) {\r\n\r\n    $scope.message = message;\r\n    $scope.headline = headline;\r\n\r\n    $scope.ok = function () {\r\n        $uibModalInstance.close();\r\n        if(!angular.isUndefined(ok)) {\r\n            ok();\r\n        }\r\n    };\r\n\r\n    $scope.cancel = function () {\r\n        $uibModalInstance.dismiss();\r\n        if (!angular.isUndefined(cancel)) {\r\n            cancel();\r\n        }\r\n    };\r\n}\r\nModalInstanceCtrl.$inject = [\"$scope\", \"$uibModalInstance\", \"headline\", \"message\", \"ok\", \"cancel\"];\r\n","angular\r\n    .module('nzbhydraApp')\r\n    .service('modalService', modalService);\r\n\r\nfunction modalService() {\r\n    this.open = function (msg) {\r\n        \r\n        //Prevent cirtcular dependency\r\n        var myInjector = angular.injector([\"ng\", \"ui.bootstrap\"]);\r\n        var $uibModal = myInjector.get(\"$uibModal\");\r\n\r\n        var modalInstance = $uibModal.open({\r\n            template: '<pre>' + msg + '</pre>',\r\n            size: \"lg\"\r\n        });\r\n\r\n        modalInstance.result.then();\r\n\r\n    };\r\n}","var HEADER_NAME = 'MyApp-Handle-Errors-Generically';\r\nvar specificallyHandleInProgress = false;\r\n\r\nnzbhydraapp.factory('RequestsErrorHandler',  [\"$q\", \"growl\", \"blockUI\", \"modalService\", function ($q, growl, blockUI, modalService) {\r\n    return {\r\n        // --- The user's API for claiming responsiblity for requests ---\r\n        specificallyHandled: function (specificallyHandledBlock) {\r\n            specificallyHandleInProgress = true;\r\n            try {\r\n                return specificallyHandledBlock();\r\n            } finally {\r\n                specificallyHandleInProgress = false;\r\n            }\r\n        },\r\n\r\n        // --- Response interceptor for handling errors generically ---\r\n        responseError: function (rejection) {\r\n            blockUI.reset();\r\n            var shouldHandle = (rejection && rejection.config && rejection.config.headers && rejection.config.headers[HEADER_NAME]);\r\n            \r\n            if (shouldHandle) {\r\n                var message = \"An error occured :<br>\" + rejection.status + \": \" + rejection.statusText;\r\n\r\n                if (rejection.data) {\r\n                    message += \"<br><br>\" + rejection.data;\r\n                }\r\n                modalService.open(message);\r\n\r\n            }\r\n\r\n            return $q.reject(rejection);\r\n        }\r\n    };\r\n}]);\r\n\r\n\r\nnzbhydraapp.config(['$provide', '$httpProvider', function ($provide, $httpProvider) {\r\n    $httpProvider.interceptors.push('RequestsErrorHandler');\r\n\r\n    // --- Decorate $http to add a special header by default ---\r\n\r\n    function addHeaderToConfig(config) {\r\n        config = config || {};\r\n        config.headers = config.headers || {};\r\n\r\n        // Add the header unless user asked to handle errors himself\r\n        if (!specificallyHandleInProgress) {\r\n            config.headers[HEADER_NAME] = true;\r\n        }\r\n\r\n        return config;\r\n    }\r\n\r\n    // The rest here is mostly boilerplate needed to decorate $http safely\r\n    $provide.decorator('$http', ['$delegate', function ($delegate) {\r\n        function decorateRegularCall(method) {\r\n            return function (url, config) {\r\n                return $delegate[method](url, addHeaderToConfig(config));\r\n            };\r\n        }\r\n\r\n        function decorateDataCall(method) {\r\n            return function (url, data, config) {\r\n                return $delegate[method](url, data, addHeaderToConfig(config));\r\n            };\r\n        }\r\n\r\n        function copyNotOverriddenAttributes(newHttp) {\r\n            for (var attr in $delegate) {\r\n                if (!newHttp.hasOwnProperty(attr)) {\r\n                    if (typeof($delegate[attr]) === 'function') {\r\n                        newHttp[attr] = function () {\r\n                            return $delegate.apply($delegate, arguments);\r\n                        };\r\n                    } else {\r\n                        newHttp[attr] = $delegate[attr];\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        var newHttp = function (config) {\r\n            return $delegate(addHeaderToConfig(config));\r\n        };\r\n\r\n        newHttp.get = decorateRegularCall('get');\r\n        newHttp.delete = decorateRegularCall('delete');\r\n        newHttp.head = decorateRegularCall('head');\r\n        newHttp.jsonp = decorateRegularCall('jsonp');\r\n        newHttp.post = decorateDataCall('post');\r\n        newHttp.put = decorateDataCall('put');\r\n\r\n        copyNotOverriddenAttributes(newHttp);\r\n\r\n        return newHttp;\r\n    }]);\r\n}]);","angular\r\n    .module('nzbhydraApp')\r\n    .config([\"formlyConfigProvider\", function config(formlyConfigProvider) {\r\n        formlyConfigProvider.extras.removeChromeAutoComplete = true;\r\n\r\n        // set templates here\r\n        formlyConfigProvider.setWrapper({\r\n            name: 'horizontalBootstrapLabel',\r\n            template: [\r\n                '<div class=\"form-group form-horizontal\" ng-class=\"{\\'row\\': !options.templateOptions.noRow}\">',\r\n                '<div style=\"text-align:right;\">',\r\n                '<label for=\"{{::id}}\" class=\"col-md-7 control-label\">',\r\n                '{{to.label}} {{to.required ? \"*\" : \"\"}}',\r\n                '</label>',\r\n                '</div>',\r\n                '<div class=\"col-md-6\">',\r\n                '<formly-transclude></formly-transclude>',\r\n                '</div>',\r\n                '<span class=\"col-md-7 help-block\">{{to.help}}</div>',\r\n                '</div>'\r\n            ].join(' ')\r\n        });\r\n\r\n\r\n        formlyConfigProvider.setWrapper({\r\n            name: 'fieldset',\r\n            template: [\r\n                '<fieldset>',\r\n                '<legend>{{options.templateOptions.label}}</legend>',\r\n                '<formly-transclude></formly-transclude>',\r\n                '</fieldset>'\r\n            ].join(' ')\r\n        });\r\n\r\n        formlyConfigProvider.setWrapper({\r\n            name: 'logicalGroup',\r\n            template: [\r\n                '<formly-transclude></formly-transclude>'\r\n            ].join(' ')\r\n        });\r\n\r\n        formlyConfigProvider.setType({\r\n            name: 'horizontalInput',\r\n            extends: 'input',\r\n            wrapper: ['horizontalBootstrapLabel', 'bootstrapHasError']\r\n        });\r\n\r\n        formlyConfigProvider.setType({\r\n            name: 'percentInput',\r\n            template: [\r\n                '<input type=\"number\" class=\"form-control\" placeholder=\"Percent\" ng-model=\"model[options.key]\" ng-pattern=\"/^[0-9]+(\\.[0-9]{1,2})?$/\" step=\"0.01\" required />'\r\n            ].join(' ')\r\n        });\r\n\r\n        formlyConfigProvider.setType({\r\n            name: 'apiKeyInput',\r\n            template: [\r\n                '<div class=\"input-group\">',\r\n                '<input type=\"text\" class=\"form-control\" ng-model=\"model[options.key]\"/>',\r\n                '<span class=\"input-group-btn input-group-btn2\">',\r\n                '<button class=\"btn btn-default\" type=\"button\" ng-click=\"generate()\"><span class=\"glyphicon glyphicon-refresh\"></span></button>',\r\n                '</div>'\r\n            ].join(' '),\r\n            controller: function ($scope) {\r\n                $scope.generate = function () {\r\n                    $scope.model[$scope.options.key] = (Math.random() * 1e32).toString(36);\r\n                }\r\n            }\r\n        });\r\n\r\n\r\n        formlyConfigProvider.setType({\r\n            name: 'shutdown',\r\n            template: [\r\n                '<button class=\"btn btn-default\" type=\"button\" ng-click=\"shutdown()\">Shutdown</button>'\r\n            ].join(' '),\r\n            wrapper: ['horizontalBootstrapLabel', 'bootstrapHasError'],\r\n            controller: function ($http, $scope, growl) {\r\n                $scope.shutdown = function () {\r\n                    $http.get(\"internalapi/shutdown\").then(function () {\r\n                            growl.info(\"Shutdown initiated. Cya!\");\r\n                        },\r\n                        function () {\r\n                            growl.info(\"Unable to send shutdown command.\");\r\n                        })\r\n                }\r\n            }\r\n        });\r\n\r\n        formlyConfigProvider.setType({\r\n            name: 'restart',\r\n            template: [\r\n                '<button class=\"btn btn-default\" type=\"button\" ng-click=\"restart()\">Restart</button>'\r\n            ].join(' '),\r\n            wrapper: ['horizontalBootstrapLabel', 'bootstrapHasError'],\r\n            controller: function ($http, $scope, growl, RestartService) {\r\n                $scope.restart = function () {\r\n                    $http.get(\"internalapi/restart\").then(function () {\r\n                            RestartService.restart();\r\n                        },\r\n                        function () {\r\n                            growl.info(\"Unable to send restart command.\");\r\n                        })\r\n                }\r\n            }\r\n        });\r\n\r\n\r\n        formlyConfigProvider.setType({\r\n            name: 'testConnection',\r\n            templateUrl: 'button-test-connection.html',\r\n            controller: function ($scope) {\r\n                $scope.message = \"\";\r\n\r\n                var testButton = \"#button-test-connection-\" + $scope.formId;\r\n                var testMessage = \"#message-test-connection-\" + $scope.formId;\r\n\r\n                function showSuccess() {\r\n                    angular.element(testButton).removeClass(\"btn-default\");\r\n                    angular.element(testButton).removeClass(\"btn-danger\");\r\n                    angular.element(testButton).addClass(\"btn-success\");\r\n                }\r\n\r\n                function showError() {\r\n                    angular.element(testButton).removeClass(\"btn-default\");\r\n                    angular.element(testButton).removeClass(\"btn-success\");\r\n                    angular.element(testButton).addClass(\"btn-danger\");\r\n                }\r\n\r\n                $scope.testConnection = function () {\r\n                    angular.element(testButton).addClass(\"glyphicon-refresh-animate\");\r\n                    var myInjector = angular.injector([\"ng\"]);\r\n                    var $http = myInjector.get(\"$http\");\r\n                    var url;\r\n                    var params;\r\n                    if ($scope.to.testType == \"downloader\") {\r\n                        url = \"internalapi/test_downloader\";\r\n                        params = {name: $scope.to.downloader, username: $scope.model.username, password: $scope.model.password};\r\n                        if ($scope.to.downloader == \"sabnzbd\") {\r\n                            params.apikey = $scope.model.apikey;\r\n                            params.url = $scope.model.url;\r\n                        } else {\r\n                            params.host = $scope.model.host;\r\n                            params.port = $scope.model.port;\r\n                            params.ssl = $scope.model.ssl;\r\n                        }\r\n                    } else if ($scope.to.testType == \"newznab\") {\r\n                        url = \"internalapi/test_newznab\";\r\n                        params = {host: $scope.model.host, apikey: $scope.model.apikey};\r\n                    } else if ($scope.to.testType == \"omgwtf\") {\r\n                        url = \"internalapi/test_omgwtf\";\r\n                        params = {username: $scope.model.username, apikey: $scope.model.apikey};\r\n                    }\r\n                    $http.get(url, {params: params}).success(function (result) {\r\n                        //Using ng-class and a scope variable doesn't work for some reason, is only updated at second click \r\n                        if (result.result) {\r\n                            angular.element(testMessage).text(\"\");\r\n                            showSuccess();\r\n                        } else {\r\n                            angular.element(testMessage).text(result.message);\r\n                            showError();\r\n                        }\r\n\r\n                    }).error(function () {\r\n                        angular.element(testMessage).text(result.message);\r\n                        showError();\r\n                    }).finally(function () {\r\n                        angular.element(testButton).removeClass(\"glyphicon-refresh-animate\");\r\n                    })\r\n                }\r\n            }\r\n        });\r\n\r\n        formlyConfigProvider.setType({\r\n            name: 'checkCaps',\r\n            templateUrl: 'button-check-caps.html',\r\n            controller: function ($scope) {\r\n                $scope.message = \"\";\r\n\r\n                var testButton = \"#button-check-caps-\" + $scope.formId;\r\n                var testMessage = \"#message-check-caps-\" + $scope.formId;\r\n\r\n                function showSuccess() {\r\n                    angular.element(testButton).removeClass(\"btn-default\");\r\n                    angular.element(testButton).removeClass(\"btn-danger\");\r\n                    angular.element(testButton).addClass(\"btn-success\");\r\n                }\r\n\r\n                function showError() {\r\n                    angular.element(testButton).removeClass(\"btn-default\");\r\n                    angular.element(testButton).removeClass(\"btn-success\");\r\n                    angular.element(testButton).addClass(\"btn-danger\");\r\n                }\r\n\r\n                $scope.checkCaps = function () {\r\n                    angular.element(testButton).addClass(\"glyphicon-refresh-animate\");\r\n                    var myInjector = angular.injector([\"ng\"]);\r\n                    var $http = myInjector.get(\"$http\");\r\n                    var url;\r\n                    var params;\r\n\r\n                    url = \"internalapi/test_caps\";\r\n                    params = {indexer: $scope.model.name, apikey: $scope.model.apikey, host: $scope.model.host};\r\n                    $http.get(url, {params: params}).success(function (result) {\r\n                        //Using ng-class and a scope variable doesn't work for some reason, is only updated at second click \r\n                        if (result.success) {\r\n                            angular.element(testMessage).text(\"Supports: \" + result.result);\r\n                            $scope.$apply(function () {\r\n                                $scope.model.search_ids = result.result;\r\n                            });\r\n                            showSuccess();\r\n                        } else {\r\n                            angular.element(testMessage).text(result.message);\r\n                            showError();\r\n                        }\r\n\r\n                    }).error(function () {\r\n                        angular.element(testMessage).text(result.message);\r\n                        showError();\r\n                    }).finally(function () {\r\n                        angular.element(testButton).removeClass(\"glyphicon-refresh-animate\");\r\n                    })\r\n                }\r\n            }\r\n        });\r\n\r\n        formlyConfigProvider.setType({\r\n            name: 'horizontalNewznabPreset',\r\n            wrapper: ['horizontalBootstrapLabel'],\r\n            templateUrl: 'newznab-preset.html',\r\n            controller: function ($scope) {\r\n                $scope.display = \"\";\r\n                $scope.selectedpreset = undefined;\r\n\r\n                $scope.presets = [\r\n                    {\r\n                        name: \"None\"\r\n                    },\r\n                    {\r\n                        name: \"DogNZB\",\r\n                        host: \"https://api.dognzb.cr\",\r\n                        searchIds: [\"tvdbid\", \"rid\", \"imdbid\"]\r\n                    },\r\n                    {\r\n                        name: \"NZBs.org\",\r\n                        host: \"https://nzbs.org\",\r\n                        searchIds: [\"tvdbid\", \"rid\", \"imdbid\", \"tvmazeid\"]\r\n                    },\r\n                    {\r\n                        name: \"nzb.su\",\r\n                        host: \"https://api.nzb.su\",\r\n                        searchIds: [\"rid\", \"imdbid\"]\r\n                    },\r\n                    {\r\n                        name: \"nzbgeek\",\r\n                        host: \"https://api.nzbgeek.info\",\r\n                        searchIds: [\"tvdbid\", \"rid\", \"imdbid\"]\r\n                    },\r\n                    {\r\n                        name: \"6box nzedb\",\r\n                        host: \"https://nzedb.6box.me\",\r\n                        searchIds: [\"rid\", \"imdbid\"]\r\n                    },\r\n                    {\r\n                        name: \"6box nntmux\",\r\n                        host: \"https://nn-tmux.6box.me\",\r\n                        searchIds: [\"tvdbid\", \"rid\", \"imdbid\"]\r\n                    },\r\n                    {\r\n                        name: \"6box\",\r\n                        host: \"https://6box.me\",\r\n                        searchIds: [\"imdbid\"]\r\n                    },\r\n                    {\r\n                        name: \"Drunken Slug\",\r\n                        host: \"https://drunkenslug.com\",\r\n                        searchIds: [\"tvdbid\", \"imdbid\", \"tvmazeid\", \"traktid\", \"tmdbid\"]\r\n                    }\r\n\r\n                ];\r\n\r\n                $scope.selectPreset = function (item, model) {\r\n                    if (item.name == \"None\") {\r\n                        $scope.model.name = \"\";\r\n                        $scope.model.host = \"\";\r\n                        $scope.model.apikey = \"\";\r\n                        $scope.model.score = 0;\r\n                        $scope.model.timeout = null;\r\n                        $scope.model.search_ids = [\"tvdbid\", \"rid\", \"imdbid\"]; //Default\r\n                        $scope.display = \"\";\r\n                    } else {\r\n                        $scope.model.name = item.name;\r\n                        $scope.model.host = item.host;\r\n                        $scope.model.search_ids = item.searchIds;\r\n                        _.defer(function () {\r\n                            $scope.display = item.name;\r\n                        });\r\n\r\n                    }\r\n                };\r\n\r\n                $scope.$watch('[model.host]', function () {\r\n                    $scope.display = \"\";\r\n                }, true);\r\n            }\r\n        });\r\n\r\n        formlyConfigProvider.setType({\r\n            name: 'horizontalTestConnection',\r\n            extends: 'testConnection',\r\n            wrapper: ['horizontalBootstrapLabel', 'bootstrapHasError']\r\n        });\r\n\r\n        formlyConfigProvider.setType({\r\n            name: 'horizontalCheckCaps',\r\n            extends: 'checkCaps',\r\n            wrapper: ['horizontalBootstrapLabel', 'bootstrapHasError']\r\n        });\r\n\r\n\r\n        formlyConfigProvider.setType({\r\n            name: 'horizontalApiKeyInput',\r\n            extends: 'apiKeyInput',\r\n            wrapper: ['horizontalBootstrapLabel', 'bootstrapHasError']\r\n        });\r\n\r\n        formlyConfigProvider.setType({\r\n            name: 'horizontalPercentInput',\r\n            extends: 'percentInput',\r\n            wrapper: ['horizontalBootstrapLabel', 'bootstrapHasError']\r\n        });\r\n\r\n\r\n        formlyConfigProvider.setType({\r\n            name: 'switch',\r\n            template: [\r\n                '<div style=\"text-align:left\"><input bs-switch type=\"checkbox\" ng-model=\"model[options.key]\"/></div>'\r\n            ].join(' ')\r\n\r\n        });\r\n\r\n\r\n        formlyConfigProvider.setType({\r\n            name: 'duoSetting',\r\n            extends: 'input',\r\n            defaultOptions: {\r\n                className: 'col-md-9',\r\n                templateOptions: {\r\n                    type: 'number',\r\n                    noRow: true,\r\n                    label: ''\r\n                }\r\n            }\r\n        });\r\n\r\n        formlyConfigProvider.setType({\r\n            name: 'horizontalSwitch',\r\n            extends: 'switch',\r\n            wrapper: ['horizontalBootstrapLabel', 'bootstrapHasError']\r\n        });\r\n\r\n        formlyConfigProvider.setType({\r\n            name: 'horizontalSelect',\r\n            extends: 'select',\r\n            wrapper: ['horizontalBootstrapLabel', 'bootstrapHasError']\r\n        });\r\n\r\n\r\n        formlyConfigProvider.setType({\r\n            name: 'ui-select-multiple',\r\n            defaultOptions: {\r\n                templateOptions: {\r\n                    optionsAttr: 'bs-options',\r\n                    ngOptions: 'option[to.valueProp] as option in to.options | filter: $select.search',\r\n                    valueProp: 'id',\r\n                    labelProp: 'label'\r\n                }\r\n            },\r\n            templateUrl: 'ui-select-multiple.html'\r\n        });\r\n\r\n        formlyConfigProvider.setType({\r\n            name: 'horizontalMultiselect',\r\n            extends: 'ui-select-multiple',\r\n            templateUrl: 'ui-select-multiple.html',\r\n            wrapper: ['horizontalBootstrapLabel', 'bootstrapHasError']\r\n        });\r\n\r\n\r\n        formlyConfigProvider.setType({\r\n            name: 'label',\r\n            template: '<label class=\"control-label\">{{to.label}}</label>'\r\n        });\r\n\r\n        formlyConfigProvider.setType({\r\n            name: 'duolabel',\r\n            extends: 'label',\r\n            defaultOptions: {\r\n                className: 'col-md-2',\r\n                templateOptions: {\r\n                    label: '-'\r\n                }\r\n            }\r\n        });\r\n\r\n    }]);\r\n","var filters = angular.module('filters', []);\r\n\r\nfilters.filter('bytes', function() {\r\n\treturn function(bytes, precision) {\r\n\t\tif (isNaN(parseFloat(bytes)) || !isFinite(bytes) || bytes == 0) return '-';\r\n\t\tif (typeof precision === 'undefined') precision = 1;\r\n\t\t\r\n\t\tvar units = ['b', 'kB', 'MB', 'GB', 'TB', 'PB'],\r\n\t\t\tnumber = Math.floor(Math.log(bytes) / Math.log(1024));\r\n\t\treturn (bytes / Math.pow(1024, Math.floor(number))).toFixed(precision) +   units[number];\r\n\t}\r\n});\r\n\r\n\r\nfilters.filter('unsafe', ['$sce', function ($sce) {\r\n\treturn $sce.trustAsHtml;\r\n}]);\r\n\r\n\r\n","angular\r\n    .module('nzbhydraApp')\r\n    .factory('ConfigService', ConfigService);\r\n\r\nfunction ConfigService($http, $q, $cacheFactory) {\r\n\r\n    var cache = $cacheFactory(\"nzbhydra\");\r\n    \r\n    return {\r\n        set: set,\r\n        get: get,\r\n        getSafe: getSafe,\r\n        invalidateSafe: invalidateSafe,\r\n        maySeeAdminArea: maySeeAdminArea\r\n    };\r\n    \r\n    \r\n    function set(newConfig) {\r\n        $http.put('internalapi/setsettings', newConfig)\r\n            .then(function (successresponse) {\r\n                console.log(\"Settings saved. Updating cache\");\r\n                cache.put(\"config\", newConfig);\r\n            }, function (errorresponse) {\r\n                console.log(\"Error saving settings: \" + errorresponse);\r\n            });\r\n    }\r\n\r\n    function get() {\r\n        var config = cache.get(\"config\");\r\n        if (angular.isUndefined(config)) {\r\n            config = $http.get('internalapi/getconfig').then(function (data) {\r\n                return data.data;\r\n            });\r\n            cache.put(\"config\", config);\r\n        }\r\n        \r\n        return config;\r\n    }\r\n\r\n    function getSafe() {\r\n            var safeconfig = cache.get(\"safeconfig\");\r\n            if (angular.isUndefined(safeconfig)) {\r\n                safeconfig = $http.get('internalapi/getsafeconfig').then(function(data) {\r\n                    return data.data;\r\n                });\r\n                cache.put(\"safeconfig\", safeconfig);\r\n            }\r\n        \r\n            return safeconfig;\r\n    }\r\n    \r\n    function invalidateSafe() {\r\n        cache.remove(\"safeconfig\");\r\n    }\r\n\r\n    function maySeeAdminArea() {\r\n        function loadAll() {\r\n            var maySeeAdminArea = cache.get(\"maySeeAdminArea\");\r\n            if (!angular.isUndefined(maySeeAdminArea)) {\r\n                var deferred = $q.defer();\r\n                deferred.resolve(maySeeAdminArea);\r\n                return deferred.promise;\r\n            }\r\n\r\n            return $http.get('internalapi/mayseeadminarea')\r\n                .then(function (configResponse) {\r\n                    var config = configResponse.data;\r\n                    cache.put(\"maySeeAdminArea\", config);\r\n                    return configResponse.data;\r\n                });\r\n        }\r\n\r\n        return loadAll().then(function (maySeeAdminArea) {\r\n            return maySeeAdminArea;\r\n        });\r\n    }\r\n}\r\nConfigService.$inject = [\"$http\", \"$q\", \"$cacheFactory\"];","angular\r\n    .module('nzbhydraApp')\r\n    .factory('ConfigFields', ConfigFields);\r\n\r\nfunction ConfigFields() {\r\n    \r\n    var restartWatcher;\r\n    \r\n    return {\r\n        getFields: getFields,\r\n        setRestartWatcher: setRestartWatcher\r\n    };\r\n    \r\n    function setRestartWatcher(restartWatcherFunction) {\r\n        restartWatcher = restartWatcherFunction;\r\n    }\r\n    \r\n    \r\n    \r\n    function restartListener(field, newValue, oldValue) {\r\n        if (newValue != oldValue) {\r\n            restartWatcher();\r\n        }\r\n    }\r\n\r\n    function getBasicIndexerFieldset(showName, host, apikey, username, searchIds, testConnection, testtype, showpreselect, showCheckCaps) {\r\n        var fieldset = [];\r\n\r\n        fieldset.push({\r\n            key: 'enabled',\r\n            type: 'horizontalSwitch',\r\n            templateOptions: {\r\n                type: 'switch',\r\n                label: 'Enabled'\r\n            }\r\n        });\r\n\r\n        if (testtype == 'newznab') {\r\n            fieldset.push(\r\n                {\r\n                    key: 'name',\r\n                    type: 'horizontalNewznabPreset',\r\n                    templateOptions: {\r\n                        label: 'Presets'\r\n                    }\r\n\r\n                });\r\n        }\r\n\r\n        if (showName) {\r\n            fieldset.push(\r\n                {\r\n                    key: 'name',\r\n                    type: 'horizontalInput',\r\n                    hideExpression: '!model.enabled && (model.name == \"\" || model.name == null)',  //Show if name is given to better identify the entries visually\r\n                    templateOptions: {\r\n                        type: 'text',\r\n                        label: 'Name',\r\n                        help: 'Used for identification. Changing the name will lose all history and stats!'\r\n                    }\r\n                })\r\n        }\r\n        if (host) {\r\n            fieldset.push(\r\n                {\r\n                    key: 'host',\r\n                    type: 'horizontalInput',\r\n                    hideExpression: '!model.enabled',\r\n                    templateOptions: {\r\n                        type: 'text',\r\n                        label: 'Host',\r\n                        placeholder: 'http://www.someindexer.com'\r\n                    }\r\n                }\r\n            )\r\n        }\r\n\r\n        if (apikey) {\r\n            fieldset.push(\r\n                {\r\n                    key: 'apikey',\r\n                    type: 'horizontalInput',\r\n                    hideExpression: '!model.enabled',\r\n                    templateOptions: {\r\n                        type: 'text',\r\n                        label: 'API Key'\r\n                    }\r\n                }\r\n            )\r\n        }\r\n\r\n        if (username) {\r\n            fieldset.push(\r\n                {\r\n                    key: 'username',\r\n                    type: 'horizontalInput',\r\n                    hideExpression: '!model.enabled',\r\n                    templateOptions: {\r\n                        type: 'text',\r\n                        label: 'Username'\r\n                    }\r\n                }\r\n            )\r\n        }\r\n\r\n        fieldset = fieldset.concat([\r\n            {\r\n                key: 'score',\r\n                type: 'horizontalInput',\r\n                hideExpression: '!model.enabled',\r\n                templateOptions: {\r\n                    type: 'number',\r\n                    label: 'Score',\r\n                    help: 'When duplicate search results are found the result from the indexer with the highest score will be shown'\r\n                }\r\n            },\r\n            {\r\n                key: 'timeout',\r\n                type: 'horizontalInput',\r\n                hideExpression: '!model.enabled',\r\n                templateOptions: {\r\n                    type: 'number',\r\n                    label: 'Timeout',\r\n                    help: 'Supercedes the general timeout in \"Searching\"'\r\n                }\r\n            },\r\n        ]);\r\n\r\n\r\n        if (showpreselect) {\r\n            fieldset.push(\r\n                {\r\n                    key: 'preselect',\r\n                    type: 'horizontalSwitch',\r\n                    hideExpression: '!model.enabled || model.accessType == \"external\"',\r\n                    templateOptions: {\r\n                        type: 'switch',\r\n                        label: 'Preselect',\r\n                        help: 'Preselect this indexer on the search page'\r\n                    }\r\n                }\r\n            );\r\n            fieldset.push(\r\n                {\r\n                    key: 'accessType',\r\n                    type: 'horizontalSelect',\r\n                    hideExpression: '!model.enabled',\r\n                    templateOptions: {\r\n                        label: 'Enable for...',\r\n                        options: [\r\n                            {name: 'Internal searches only', value: 'internal'},\r\n                            {name: 'API searches only', value: 'external'},\r\n                            {name: 'Internal and API searches', value: 'both'}\r\n                        ]\r\n                    }\r\n                }\r\n            )\r\n        }\r\n\r\n        if (searchIds) {\r\n            fieldset.push(\r\n                {\r\n                    key: 'search_ids',\r\n                    type: 'horizontalMultiselect',\r\n                    hideExpression: '!model.enabled',\r\n                    templateOptions: {\r\n                        label: 'Search types',\r\n                        options: [\r\n                            {label: 'TVDB', id: 'tvdbid'},\r\n                            {label: 'TVRage', id: 'rid'},\r\n                            {label: 'IMDB', id: 'imdbid'},\r\n                            {label: 'Trakt', id: 'traktid'},\r\n                            {label: 'TVMaze', id: 'tvmazeid'},\r\n                            {label: 'TMDB', id: 'tmdbid'}\r\n                        ]\r\n                    }\r\n                }\r\n            )\r\n        }\r\n\r\n        if (testConnection) {\r\n            fieldset.push(\r\n                {\r\n                    type: 'horizontalTestConnection',\r\n                    hideExpression: '!model.enabled || !model.host || !model.apikey || !model.name',\r\n                    templateOptions: {\r\n                        label: 'Test connection',\r\n                        testType: testtype\r\n                    }\r\n                }\r\n            )\r\n        }\r\n\r\n        if (showCheckCaps) {\r\n            fieldset.push(\r\n                {\r\n                    type: 'horizontalCheckCaps',\r\n                    hideExpression: '!model.enabled || !model.host || !model.apikey || !model.name',\r\n                    templateOptions: {\r\n                        label: 'Check search types'\r\n                    }\r\n                }\r\n            )\r\n        }\r\n\r\n        return fieldset;\r\n    }\r\n\r\n    function getNewznabFieldset(index) {\r\n        return {\r\n            wrapper: 'fieldset',\r\n            hideExpression: function ($viewValue, $modelValue, scope) {\r\n                if (index > 1 && index <= 40) {\r\n                    var allBeforeNamed = true;\r\n                    for (var i = 1; i < index; i++) {\r\n                        if (!scope.model[\"newznab\" + i].name) {\r\n                            allBeforeNamed = false;\r\n                            break;\r\n                        }\r\n                    }\r\n                    return !allBeforeNamed;\r\n                }\r\n                return false;\r\n            },\r\n            key: 'newznab' + index,\r\n            templateOptions: {label: 'Newznab ' + index},\r\n            fieldGroup: getBasicIndexerFieldset(true, true, true, false, true, true, 'newznab', true, true)\r\n        };\r\n    }\r\n\r\n    function getFields() {\r\n        console.log(\"Called getFields() from ConfigFields\");\r\n\r\n        return {\r\n            main: [\r\n                {\r\n                    wrapper: 'fieldset',\r\n                    templateOptions: {label: 'Hosting'},\r\n                    fieldGroup: [\r\n                        {\r\n                            key: 'host',\r\n                            type: 'horizontalInput',\r\n                            templateOptions: {\r\n                                type: 'text',\r\n                                label: 'Host',\r\n                                placeholder: 'IPv4 address to bind to',\r\n                                help: 'Requires restart'\r\n                            },\r\n                            watcher: {\r\n                                listener: restartListener\r\n                            }\r\n                        },\r\n                        {\r\n                            key: 'port',\r\n                            type: 'horizontalInput',\r\n                            templateOptions: {\r\n                                type: 'number',\r\n                                label: 'Port',\r\n                                placeholder: '5050',\r\n                                help: 'Requires restart'\r\n                            },\r\n                            watcher: {\r\n                                listener: restartListener\r\n                            }\r\n                        },\r\n                        {\r\n                            key: 'urlBase',\r\n                            type: 'horizontalInput',\r\n                            templateOptions: {\r\n                                type: 'text',\r\n                                label: 'URL base',\r\n                                placeholder: '/nzbhydra',\r\n                                help: 'Set when using an external proxy'\r\n                            }\r\n                        },\r\n                        {\r\n                            key: 'externalUrl',\r\n                            type: 'horizontalInput',\r\n                            templateOptions: {\r\n                                type: 'text',\r\n                                label: 'External URL',\r\n                                placeholder: 'https://www.somedomain.com/nzbhydra/',\r\n                                help: 'Set to the full external URL so machines outside can use the generated NZB links.'\r\n                            }\r\n                        },\r\n                        {\r\n                            key: 'useLocalUrlForApiAccess',\r\n                            type: 'horizontalSwitch',\r\n                            hideExpression: '!model.externalUrl',\r\n                            templateOptions: {\r\n                                type: 'switch',\r\n                                label: 'Use local address in API results',\r\n                                help: 'Disable to make API results use the external URL in NZB links.'\r\n                            }\r\n                        },\r\n                        {\r\n                            key: 'ssl',\r\n                            type: 'horizontalSwitch',\r\n                            templateOptions: {\r\n                                type: 'switch',\r\n                                label: 'Use SSL',\r\n                                help: 'Requires restart'\r\n                            },\r\n                            watcher: {\r\n                                listener: restartListener\r\n                            }\r\n                        },\r\n                        {\r\n                            key: 'sslcert',\r\n                            hideExpression: '!model.ssl',\r\n                            type: 'horizontalInput',\r\n                            templateOptions: {\r\n                                type: 'text',\r\n                                label: 'SSL certificate file',\r\n                                required: true,\r\n                                help: 'Requires restart'\r\n                            },\r\n                            watcher: {\r\n                                listener: restartListener\r\n                            }\r\n                        },\r\n                        {\r\n                            key: 'sslkey',\r\n                            hideExpression: '!model.ssl',\r\n                            type: 'horizontalInput',\r\n                            templateOptions: {\r\n                                type: 'text',\r\n                                label: 'SSL key file',\r\n                                required: true,\r\n                                help: 'Requires restart'\r\n                            },\r\n                            watcher: {\r\n                                listener: restartListener\r\n                            }\r\n                        }\r\n\r\n                    ]\r\n                },\r\n                {\r\n                    wrapper: 'fieldset',\r\n                    templateOptions: {label: 'Security'},\r\n                    fieldGroup: [\r\n                        {\r\n                            key: 'enableAuth',\r\n                            type: 'horizontalSwitch',\r\n                            templateOptions: {\r\n                                type: 'switch',\r\n                                label: 'Enable authentication'\r\n                            }\r\n                        },\r\n                        {\r\n                            key: 'username',\r\n                            type: 'horizontalInput',\r\n                            hideExpression: '!model.enableAuth',\r\n                            templateOptions: {\r\n                                type: 'text',\r\n                                label: 'Username',\r\n                                required: true\r\n                            }\r\n                        },\r\n                        {\r\n                            key: 'password',\r\n                            hideExpression: '!model.enableAuth',\r\n                            type: 'horizontalInput',\r\n                            templateOptions: {\r\n                                type: 'password',\r\n                                label: 'Password',\r\n                                required: true\r\n                            }\r\n                        },\r\n                        {\r\n                            key: 'apikey',\r\n                            type: 'horizontalApiKeyInput',\r\n                            templateOptions: {\r\n                                label: 'API key',\r\n                                help: 'Remove to disable. Alphanumeric only'\r\n                            }\r\n                        },\r\n                        {\r\n                            key: 'enableAdminAuth',\r\n                            type: 'horizontalSwitch',\r\n                            templateOptions: {\r\n                                type: 'switch',\r\n                                label: 'Enable admin user',\r\n                                help: 'Enable to protect the config with a separate admin user'\r\n                            }\r\n                        },\r\n                        {\r\n                            key: 'adminUsername',\r\n                            type: 'horizontalInput',\r\n                            hideExpression: '!model.enableAdminAuth',\r\n                            templateOptions: {\r\n                                type: 'text',\r\n                                label: 'Admin username',\r\n                                required: true\r\n                            }\r\n                        },\r\n                        {\r\n                            key: 'adminPassword',\r\n                            hideExpression: '!model.enableAdminAuth',\r\n                            type: 'horizontalInput',\r\n                            templateOptions: {\r\n                                type: 'password',\r\n                                label: 'Admin password',\r\n                                required: true\r\n                            }\r\n                        },\r\n                        {\r\n                            key: 'enableAdminAuthForStats',\r\n                            type: 'horizontalSwitch',\r\n                            hideExpression: '!model.enableAdminAuth',\r\n                            templateOptions: {\r\n                                type: 'switch',\r\n                                label: 'Enable stats admin',\r\n                                help: 'Enable to protect the history & stats with the admin user'\r\n                            }\r\n                        }\r\n\r\n\r\n                    ]\r\n                },\r\n                {\r\n                    wrapper: 'fieldset',\r\n                    templateOptions: {label: 'Caching'},\r\n                    fieldGroup: [\r\n                        {\r\n                            key: 'enableCache',\r\n                            type: 'horizontalSwitch',\r\n                            templateOptions: {\r\n                                type: 'switch',\r\n                                label: 'Enable caching'\r\n                            }\r\n                        },\r\n                        {\r\n                            key: 'enableCacheForApi',\r\n                            hideExpression: '!model.enableCache',\r\n                            type: 'horizontalSwitch',\r\n                            templateOptions: {\r\n                                type: 'switch',\r\n                                label: 'Cache API search results',\r\n                                help: 'Enable to reduce load on indexers, disable for always newest results'\r\n                            }\r\n                        },\r\n                        {\r\n                            key: 'cacheType',\r\n                            hideExpression: '!model.enableCache',\r\n                            type: 'horizontalSelect',\r\n                            templateOptions: {\r\n                                type: 'select',\r\n                                label: 'Type',\r\n                                options: [\r\n                                    {name: 'Memory only', value: 'memory'},\r\n                                    {name: 'File sytem', value: 'file'}\r\n                                ]\r\n                            }\r\n                        },\r\n                        {\r\n                            key: 'cacheTimeout',\r\n                            hideExpression: '!model.enableCache',\r\n                            type: 'horizontalInput',\r\n                            templateOptions: {\r\n                                type: 'number',\r\n                                label: 'Cache timeout',\r\n                                help: 'Time after which cache entries will be discarded',\r\n                                addonRight: {\r\n                                    text: 'minutes'\r\n                                }\r\n                            }\r\n                        },\r\n                        {\r\n                            key: 'cachethreshold',\r\n                            hideExpression: '!model.enableCache',\r\n                            type: 'horizontalInput',\r\n                            templateOptions: {\r\n                                type: 'number',\r\n                                label: 'Cache threshold',\r\n                                help: 'Max amount of items held in cache',\r\n                                addonRight: {\r\n                                    text: 'items'\r\n                                }\r\n                            }\r\n                        },\r\n                        {\r\n                            key: 'cacheFolder',\r\n                            hideExpression: '!model.enableCache || model.cacheType == \"memory\"',\r\n                            type: 'horizontalInput',\r\n                            templateOptions: {\r\n                                type: 'text',\r\n                                label: 'Cache folder'\r\n                            }\r\n                        }\r\n\r\n                    ]\r\n                },\r\n\r\n                {\r\n                    wrapper: 'fieldset',\r\n                    key: 'logging',\r\n                    templateOptions: {label: 'Logging'},\r\n                    fieldGroup: [\r\n                        {\r\n                            key: 'logfile-level',\r\n                            type: 'horizontalSelect',\r\n                            templateOptions: {\r\n                                type: 'select',\r\n                                label: 'Logfile level',\r\n                                options: [\r\n                                    {name: 'Critical', value: 'CRITICAL'},\r\n                                    {name: 'Error', value: 'ERROR'},\r\n                                    {name: 'Warning', value: 'WARNING'},\r\n                                    {name: 'Debug', value: 'DEBUG'},\r\n                                    {name: 'Info', value: 'INFO'}\r\n                                ]\r\n                            },\r\n                            watcher: {\r\n                                listener: restartListener\r\n                            }\r\n                        },\r\n                        {\r\n                            key: 'logfile-filename',\r\n                            type: 'horizontalInput',\r\n                            templateOptions: {\r\n                                type: 'text',\r\n                                label: 'Log file'\r\n                            },\r\n                            watcher: {\r\n                                listener: restartListener\r\n                            }\r\n                        },\r\n                        {\r\n                            key: 'consolelevel',\r\n                            type: 'horizontalSelect',\r\n                            templateOptions: {\r\n                                type: 'select',\r\n                                label: 'Console log level',\r\n                                options: [\r\n                                    {name: 'Critical', value: 'CRITICAL'},\r\n                                    {name: 'Error', value: 'ERROR'},\r\n                                    {name: 'Warning', value: 'WARNING'},\r\n                                    {name: 'Info', value: 'INFO'},\r\n                                    {name: 'Debug', value: 'DEBUG'}\r\n                                ]\r\n                            },\r\n                            watcher: {\r\n                                listener: restartListener\r\n                            }\r\n                        }\r\n\r\n\r\n                    ]\r\n                },\r\n                {\r\n                    wrapper: 'fieldset',\r\n                    templateOptions: {label: 'Other'},\r\n                    fieldGroup: [\r\n                        {\r\n                            key: 'debug',\r\n                            type: 'horizontalSwitch',\r\n                            templateOptions: {\r\n                                type: 'switch',\r\n                                label: 'Enable debugging',\r\n                                help: \"Only do this if you know what and why you're doing it\"\r\n                            }\r\n                        },\r\n                        {\r\n                            key: 'runThreaded',\r\n                            type: 'horizontalSwitch',\r\n                            templateOptions: {\r\n                                type: 'switch',\r\n                                label: 'Run threaded server',\r\n                                help: 'Requires restart. Experimental. Please report your experiences.'\r\n                            },\r\n                            watcher: {\r\n                                listener: restartListener\r\n                            }\r\n                        },\r\n                        {\r\n                            key: 'startupBrowser',\r\n                            type: 'horizontalSwitch',\r\n                            templateOptions: {\r\n                                type: 'switch',\r\n                                label: 'Open browser on startup'\r\n                            }\r\n                        },\r\n                        {\r\n                            key: 'branch',\r\n                            type: 'horizontalInput',\r\n                            templateOptions: {\r\n                                type: 'text',\r\n                                label: 'Repository branch',\r\n                                help: 'Stay with master...'\r\n                            }\r\n                        }\r\n                    ]\r\n                }\r\n            ],\r\n\r\n            searching: [\r\n                {\r\n                    wrapper: 'fieldset',\r\n                    templateOptions: {\r\n                        label: 'Indexer access'\r\n                    },\r\n                    fieldGroup: [\r\n                        {\r\n                            key: 'timeout',\r\n                            type: 'horizontalInput',\r\n                            templateOptions: {\r\n                                type: 'number',\r\n                                label: 'Timeout when accessing indexers',\r\n                                addonRight: {\r\n                                    text: 'seconds'\r\n                                }\r\n                            }\r\n                        },\r\n                        {\r\n                            key: 'ignoreTemporarilyDisabled',\r\n                            type: 'horizontalSwitch',\r\n                            templateOptions: {\r\n                                type: 'switch',\r\n                                label: 'Ignore temporarily disabled',\r\n                                help: \"If enabled access to indexers will never be paused after an error occurred\"\r\n                            }\r\n                        },\r\n                        {\r\n                            key: 'ignorePassworded',\r\n                            type: 'horizontalSwitch',\r\n                            templateOptions: {\r\n                                type: 'switch',\r\n                                label: 'Ignore passworded releases',\r\n                                help: \"Not all indexers provide this information\"\r\n                            }\r\n                        },\r\n\r\n                        {\r\n                            key: 'ignoreWords',\r\n                            type: 'horizontalInput',\r\n                            templateOptions: {\r\n                                type: 'text',\r\n                                label: 'Ignore results with ...',\r\n                                placeholder: 'separate, with, commas, like, this',\r\n                                help: \"Results with any of these words in the title will be ignored\"\r\n                            }\r\n                        },\r\n\r\n\r\n                        {\r\n                            key: 'generate_queries',\r\n                            type: 'horizontalMultiselect',\r\n                            templateOptions: {\r\n                                label: 'Generate queries',\r\n                                options: [\r\n                                    {label: 'Internal searches', id: 'internal'},\r\n                                    {label: 'API searches', id: 'external'}\r\n                                ],\r\n                                help: \"Generate queries for indexers which do not support ID based searches\"\r\n                            }\r\n                        },\r\n                        {\r\n                            key: 'userAgent',\r\n                            type: 'horizontalInput',\r\n                            templateOptions: {\r\n                                type: 'text',\r\n                                label: 'User agent'\r\n                            }\r\n                        }\r\n                    ]\r\n                },\r\n                {\r\n                    wrapper: 'fieldset',\r\n                    templateOptions: {\r\n                        label: 'Result processing'\r\n                    },\r\n                    fieldGroup: [\r\n                        {\r\n                            key: 'htmlParser',\r\n                            type: 'horizontalSelect',\r\n                            templateOptions: {\r\n                                type: 'select',\r\n                                label: 'Type',\r\n                                options: [\r\n                                    {name: 'Default BS (slow)', value: 'html.parser'},\r\n                                    {name: 'LXML (faster, needs to be installed separately)', value: 'lxml'}\r\n                                ]\r\n                            }\r\n                        },\r\n                        {\r\n                            key: 'duplicateSizeThresholdInPercent',\r\n                            type: 'horizontalPercentInput',\r\n                            templateOptions: {\r\n                                type: 'text',\r\n                                label: 'Duplicate size threshold',\r\n                                addonRight: {\r\n                                    text: '%'\r\n                                }\r\n\r\n                            }\r\n                        },\r\n                        {\r\n                            key: 'duplicateAgeThreshold',\r\n                            type: 'horizontalInput',\r\n                            templateOptions: {\r\n                                type: 'number',\r\n                                label: 'Duplicate age threshold',\r\n                                addonRight: {\r\n                                    text: 'seconds'\r\n                                }\r\n                            }\r\n                        },\r\n                        {\r\n                            key: 'removeDuplicatesExternal',\r\n                            type: 'horizontalSwitch',\r\n                            templateOptions: {\r\n                                type: 'switch',\r\n                                label: 'Remove API duplicates',\r\n                                help: 'Remove duplicates when searching via API'\r\n                            }\r\n                        }\r\n                    ]\r\n                },\r\n\r\n                {\r\n                    wrapper: 'fieldset',\r\n                    key: 'categorysizes',\r\n                    templateOptions: {label: 'Category sizes'},\r\n                    fieldGroup: [\r\n\r\n                        {\r\n                            key: 'enable_category_sizes',\r\n                            type: 'horizontalSwitch',\r\n                            templateOptions: {\r\n                                type: 'switch',\r\n                                label: 'Category sizes',\r\n                                help: \"Preset min and max sizes depending on the selected category\"\r\n                            }\r\n                        },\r\n                        {\r\n                            wrapper: 'logicalGroup',\r\n                            hideExpression: '!model.enable_category_sizes',\r\n                            fieldGroup: [\r\n                                {\r\n                                    wrapper: 'horizontalBootstrapLabel',\r\n                                    templateOptions: {\r\n                                        label: 'Movies'\r\n                                    },\r\n                                    fieldGroup: [\r\n                                        {\r\n                                            key: 'moviesmin',\r\n                                            type: 'duoSetting',\r\n                                            templateOptions: {\r\n                                                addonRight: {\r\n                                                    text: 'MB'\r\n                                                }\r\n                                            }\r\n                                        },\r\n                                        {\r\n                                            type: 'duolabel'\r\n                                        },\r\n                                        {\r\n                                            key: 'moviesmax',\r\n                                            type: 'duoSetting', templateOptions: {addonRight: {text: 'MB'}}\r\n                                        }\r\n                                    ]\r\n                                },\r\n                                {\r\n                                    wrapper: 'horizontalBootstrapLabel',\r\n                                    templateOptions: {\r\n                                        label: 'Movies HD'\r\n                                    },\r\n                                    fieldGroup: [\r\n                                        {\r\n                                            key: 'movieshdmin',\r\n                                            type: 'duoSetting', templateOptions: {addonRight: {text: 'MB'}}\r\n                                        },\r\n                                        {\r\n                                            type: 'duolabel'\r\n                                        },\r\n                                        {\r\n                                            key: 'movieshdmax',\r\n                                            type: 'duoSetting', templateOptions: {addonRight: {text: 'MB'}}\r\n                                        }\r\n                                    ]\r\n                                },\r\n                                {\r\n                                    wrapper: 'horizontalBootstrapLabel',\r\n                                    templateOptions: {\r\n                                        label: 'Movies SD'\r\n                                    },\r\n                                    fieldGroup: [\r\n                                        {\r\n                                            key: 'moviessdmin',\r\n                                            type: 'duoSetting', templateOptions: {addonRight: {text: 'MB'}}\r\n                                        },\r\n                                        {\r\n                                            type: 'duolabel'\r\n                                        },\r\n                                        {\r\n                                            key: 'movieshdmin',\r\n                                            type: 'duoSetting', templateOptions: {addonRight: {text: 'MB'}}\r\n                                        }\r\n                                    ]\r\n                                },\r\n\r\n                                {\r\n                                    wrapper: 'horizontalBootstrapLabel',\r\n                                    templateOptions: {\r\n                                        label: 'TV'\r\n                                    },\r\n                                    fieldGroup: [\r\n                                        {\r\n                                            key: 'tvmin',\r\n                                            type: 'duoSetting', templateOptions: {addonRight: {text: 'MB'}}\r\n                                        },\r\n                                        {\r\n                                            type: 'duolabel'\r\n                                        },\r\n                                        {\r\n                                            key: 'tvmax',\r\n                                            type: 'duoSetting', templateOptions: {addonRight: {text: 'MB'}}\r\n                                        }\r\n                                    ]\r\n                                },\r\n\r\n                                {\r\n                                    wrapper: 'horizontalBootstrapLabel',\r\n                                    templateOptions: {\r\n                                        label: 'TV HD'\r\n                                    },\r\n                                    fieldGroup: [\r\n                                        {\r\n                                            key: 'tvhdmin',\r\n                                            type: 'duoSetting', templateOptions: {addonRight: {text: 'MB'}}\r\n                                        },\r\n                                        {\r\n                                            type: 'duolabel'\r\n                                        },\r\n                                        {\r\n                                            key: 'tvhdmax',\r\n                                            type: 'duoSetting', templateOptions: {addonRight: {text: 'MB'}}\r\n                                        }\r\n                                    ]\r\n                                },\r\n\r\n                                {\r\n                                    wrapper: 'horizontalBootstrapLabel',\r\n                                    templateOptions: {\r\n                                        label: 'TV SD'\r\n                                    },\r\n                                    fieldGroup: [\r\n                                        {\r\n                                            key: 'tvsdmin',\r\n                                            type: 'duoSetting', templateOptions: {addonRight: {text: 'MB'}}\r\n                                        },\r\n                                        {\r\n                                            type: 'duolabel'\r\n                                        },\r\n                                        {\r\n                                            key: 'tvsdmax',\r\n                                            type: 'duoSetting', templateOptions: {addonRight: {text: 'MB'}}\r\n                                        }\r\n                                    ]\r\n                                },\r\n\r\n                                {\r\n                                    wrapper: 'horizontalBootstrapLabel',\r\n                                    templateOptions: {\r\n                                        label: 'Audio'\r\n                                    },\r\n                                    fieldGroup: [\r\n                                        {\r\n                                            key: 'audiomin',\r\n                                            type: 'duoSetting', templateOptions: {addonRight: {text: 'MB'}}\r\n                                        },\r\n                                        {\r\n                                            type: 'duolabel'\r\n                                        },\r\n                                        {\r\n                                            key: 'audiomax',\r\n                                            type: 'duoSetting', templateOptions: {addonRight: {text: 'MB'}}\r\n                                        }\r\n                                    ]\r\n                                },\r\n\r\n                                {\r\n                                    wrapper: 'horizontalBootstrapLabel',\r\n                                    templateOptions: {\r\n                                        label: 'Audio FLAC'\r\n                                    },\r\n                                    fieldGroup: [\r\n                                        {\r\n                                            key: 'flacmin',\r\n                                            type: 'duoSetting', templateOptions: {addonRight: {text: 'MB'}}\r\n                                        },\r\n                                        {\r\n                                            type: 'duolabel'\r\n                                        },\r\n                                        {\r\n                                            key: 'flacmax',\r\n                                            type: 'duoSetting', templateOptions: {addonRight: {text: 'MB'}}\r\n                                        }\r\n                                    ]\r\n                                },\r\n\r\n                                {\r\n                                    wrapper: 'horizontalBootstrapLabel',\r\n                                    templateOptions: {\r\n                                        label: 'Audio MP3'\r\n                                    },\r\n                                    fieldGroup: [\r\n                                        {\r\n                                            key: 'mp3min',\r\n                                            type: 'duoSetting', templateOptions: {addonRight: {text: 'MB'}}\r\n                                        },\r\n                                        {\r\n                                            type: 'duolabel'\r\n                                        },\r\n                                        {\r\n                                            key: 'mp3max',\r\n                                            type: 'duoSetting', templateOptions: {addonRight: {text: 'MB'}}\r\n                                        }\r\n                                    ]\r\n                                },\r\n\r\n                                {\r\n                                    wrapper: 'horizontalBootstrapLabel',\r\n                                    templateOptions: {\r\n                                        label: 'Audiobook'\r\n                                    },\r\n                                    fieldGroup: [\r\n                                        {\r\n                                            key: 'audiobookmin',\r\n                                            type: 'duoSetting', templateOptions: {addonRight: {text: 'MB'}}\r\n                                        },\r\n                                        {\r\n                                            type: 'duolabel'\r\n                                        },\r\n                                        {\r\n                                            key: 'audiobookmax',\r\n                                            type: 'duoSetting', templateOptions: {addonRight: {text: 'MB'}}\r\n                                        }\r\n                                    ]\r\n                                },\r\n\r\n                                {\r\n                                    wrapper: 'horizontalBootstrapLabel',\r\n                                    templateOptions: {\r\n                                        label: 'Console'\r\n                                    },\r\n                                    fieldGroup: [\r\n                                        {\r\n                                            key: 'consolemin',\r\n                                            type: 'duoSetting', templateOptions: {addonRight: {text: 'MB'}}\r\n                                        },\r\n                                        {\r\n                                            type: 'duolabel'\r\n                                        },\r\n                                        {\r\n                                            key: 'consolemax',\r\n                                            type: 'duoSetting', templateOptions: {addonRight: {text: 'MB'}}\r\n                                        }\r\n                                    ]\r\n                                },\r\n\r\n                                {\r\n                                    wrapper: 'horizontalBootstrapLabel',\r\n                                    templateOptions: {\r\n                                        label: 'PC'\r\n                                    },\r\n                                    fieldGroup: [\r\n                                        {\r\n                                            key: 'pcmin',\r\n                                            type: 'duoSetting', templateOptions: {addonRight: {text: 'MB'}}\r\n                                        },\r\n                                        {\r\n                                            type: 'duolabel'\r\n                                        },\r\n                                        {\r\n                                            key: 'pcmax',\r\n                                            type: 'duoSetting', templateOptions: {addonRight: {text: 'MB'}}\r\n                                        }\r\n                                    ]\r\n                                },\r\n\r\n                                {\r\n                                    wrapper: 'horizontalBootstrapLabel',\r\n                                    templateOptions: {\r\n                                        label: 'XXX'\r\n                                    },\r\n                                    fieldGroup: [\r\n                                        {\r\n                                            key: 'xxxmin',\r\n                                            type: 'duoSetting', templateOptions: {addonRight: {text: 'MB'}}\r\n                                        },\r\n                                        {\r\n                                            type: 'duolabel'\r\n                                        },\r\n                                        {\r\n                                            key: 'xxxmax',\r\n                                            type: 'duoSetting', templateOptions: {addonRight: {text: 'MB'}}\r\n                                        }\r\n                                    ]\r\n                                }\r\n                            ]\r\n                        }\r\n\r\n                    ]\r\n                }\r\n\r\n            ],\r\n\r\n            downloader: [\r\n                {\r\n                    key: 'downloader',\r\n                    type: 'horizontalSelect',\r\n                    templateOptions: {\r\n                        type: 'select',\r\n                        label: 'Downloader',\r\n                        options: [\r\n                            {name: 'None', value: 'none'},\r\n                            {name: 'NZBGet', value: 'nzbget'},\r\n                            {name: 'SABnzbd', value: 'sabnzbd'}\r\n                        ]\r\n                    }\r\n                },\r\n                {\r\n                    key: 'nzbaccesstype',\r\n                    type: 'horizontalSelect',\r\n                    templateOptions: {\r\n                        type: 'select',\r\n                        label: 'NZB access type',\r\n                        options: [\r\n                            {name: 'Proxy NZBs from indexer', value: 'serve'},\r\n                            {name: 'Redirect to the indexer', value: 'redirect'},\r\n                            {name: 'Use direct links', value: 'direct'}\r\n                        ],\r\n                        help: \"How external access to NZBs is provided. Redirecting is recommended.\"\r\n                    }\r\n                },\r\n                {\r\n                    key: 'nzbAddingType',\r\n                    type: 'horizontalSelect',\r\n                    templateOptions: {\r\n                        type: 'select',\r\n                        label: 'NZB adding type',\r\n                        options: [\r\n                            {name: 'Send link', value: 'link'},\r\n                            {name: 'Upload NZB', value: 'nzb'}\r\n                        ],\r\n                        help: \"How NZBs are added to the downloader, either by sending a link to the NZB or by uploading the NZB data\"\r\n                    }\r\n                },\r\n                {\r\n                    wrapper: 'fieldset',\r\n                    key: 'nzbget',\r\n                    hideExpression: 'model.downloader!=\"nzbget\"',\r\n                    templateOptions: {label: 'NZBGet'},\r\n                    fieldGroup: [\r\n                        {\r\n                            key: 'host',\r\n                            type: 'horizontalInput',\r\n                            templateOptions: {\r\n                                type: 'text',\r\n                                label: 'Host'\r\n                            }\r\n                        },\r\n                        {\r\n                            key: 'port',\r\n                            type: 'horizontalInput',\r\n                            templateOptions: {\r\n                                type: 'number',\r\n                                label: 'Port',\r\n                                placeholder: '5050'\r\n                            }\r\n                        },\r\n                        {\r\n                            key: 'ssl',\r\n                            type: 'horizontalSwitch',\r\n                            templateOptions: {\r\n                                type: 'switch',\r\n                                label: 'Use SSL'\r\n                            }\r\n                        },\r\n                        {\r\n                            key: 'username',\r\n                            type: 'horizontalInput',\r\n                            templateOptions: {\r\n                                type: 'text',\r\n                                label: 'Username'\r\n                            }\r\n                        },\r\n                        {\r\n                            key: 'password',\r\n                            type: 'horizontalInput',\r\n                            templateOptions: {\r\n                                type: 'password',\r\n                                label: 'Password'\r\n                            }\r\n                        },\r\n                        {\r\n                            key: 'defaultCategory',\r\n                            type: 'horizontalInput',\r\n                            templateOptions: {\r\n                                type: 'text',\r\n                                label: 'Default category',\r\n                                help: 'When adding NZBs this category will be used instead of asking for the category'\r\n                            }\r\n                        },\r\n                        {\r\n                            type: 'horizontalTestConnection',\r\n                            templateOptions: {\r\n                                label: 'Test connection',\r\n                                testType: 'downloader',\r\n                                downloader: 'nzbget'\r\n                            }\r\n                        }\r\n\r\n\r\n                    ]\r\n                },\r\n                {\r\n                    wrapper: 'fieldset',\r\n                    key: 'sabnzbd',\r\n                    hideExpression: 'model.downloader!=\"sabnzbd\"',\r\n                    templateOptions: {label: 'SABnzbd'},\r\n                    fieldGroup: [\r\n                        {\r\n                            key: 'url',\r\n                            type: 'horizontalInput',\r\n                            templateOptions: {\r\n                                type: 'text',\r\n                                label: 'URL'\r\n                            }\r\n                        },\r\n                        {\r\n                            key: 'username',\r\n                            type: 'horizontalInput',\r\n                            templateOptions: {\r\n                                type: 'text',\r\n                                label: 'Username',\r\n                                help: 'Usually not needed when an API key is used'\r\n                            }\r\n                        },\r\n                        {\r\n                            key: 'password',\r\n                            type: 'horizontalInput',\r\n                            templateOptions: {\r\n                                type: 'password',\r\n                                label: 'Password',\r\n                                help: 'Usually not needed when an API key is used'\r\n                            }\r\n                        },\r\n                        {\r\n                            key: 'apikey',\r\n                            type: 'horizontalInput',\r\n                            templateOptions: {\r\n                                type: 'text',\r\n                                label: 'API Key'\r\n                            }\r\n                        },\r\n                        {\r\n                            key: 'defaultCategory',\r\n                            type: 'horizontalInput',\r\n                            templateOptions: {\r\n                                type: 'text',\r\n                                label: 'Default category',\r\n                                help: 'When adding NZBs this category will be used instead of asking for the category'\r\n                            }\r\n                        },\r\n                        {\r\n                            type: 'horizontalTestConnection',\r\n                            templateOptions: {\r\n                                label: 'Test connection',\r\n                                testType: 'downloader',\r\n                                downloader: 'sabnzbd'\r\n                            }\r\n                        }\r\n\r\n\r\n                    ]\r\n                }\r\n            ],\r\n\r\n            indexers: [\r\n                {\r\n                    wrapper: 'fieldset',\r\n                    key: 'Binsearch',\r\n                    templateOptions: {label: 'Binsearch'},\r\n                    fieldGroup: getBasicIndexerFieldset(false, false, false, false, false, false, \"binsearch\", true)\r\n                },\r\n                {\r\n                    wrapper: 'fieldset',\r\n                    key: 'NZBClub',\r\n                    templateOptions: {label: 'NZBClub'},\r\n                    fieldGroup: getBasicIndexerFieldset(false, false, false, false, false, false, \"nzbclub\", true)\r\n                },\r\n                {\r\n                    wrapper: 'fieldset',\r\n                    key: 'NZBIndex',\r\n                    templateOptions: {label: 'NZBIndex'},\r\n                    fieldGroup: getBasicIndexerFieldset(false, false, false, false, false, false, \"nzbindex\", true).concat([{\r\n                        key: 'generalMinSize',\r\n                        type: 'horizontalInput',\r\n                        hideExpression: '!model.enabled',\r\n                        templateOptions: {\r\n                            type: 'number',\r\n                            label: 'Min size',\r\n                            help: 'NZBIndex returns a lot of crap with small file sizes. Set this value and all smaller results will be filtered out no matter the category'\r\n                        }\r\n                    }])\r\n                },\r\n                {\r\n                    wrapper: 'fieldset',\r\n                    key: 'omgwtfnzbs',\r\n                    templateOptions: {label: 'omgwtfnzbs.org'},\r\n                    fieldGroup: getBasicIndexerFieldset(false, false, true, true, false, true, 'omgwtf', true)\r\n                },\r\n                {\r\n                    wrapper: 'fieldset',\r\n                    key: 'Womble',\r\n                    templateOptions: {label: 'Womble'},\r\n                    fieldGroup: getBasicIndexerFieldset(false, false, false, false, false, false, \"womble\", false)\r\n                },\r\n\r\n\r\n                getNewznabFieldset(1),\r\n                getNewznabFieldset(2),\r\n                getNewznabFieldset(3),\r\n                getNewznabFieldset(4),\r\n                getNewznabFieldset(5),\r\n                getNewznabFieldset(6),\r\n                getNewznabFieldset(7),\r\n                getNewznabFieldset(8),\r\n                getNewznabFieldset(9),\r\n                getNewznabFieldset(10),\r\n                getNewznabFieldset(11),\r\n                getNewznabFieldset(12),\r\n                getNewznabFieldset(13),\r\n                getNewznabFieldset(14),\r\n                getNewznabFieldset(15),\r\n                getNewznabFieldset(16),\r\n                getNewznabFieldset(17),\r\n                getNewznabFieldset(18),\r\n                getNewznabFieldset(19),\r\n                getNewznabFieldset(20),\r\n                getNewznabFieldset(21),\r\n                getNewznabFieldset(22),\r\n                getNewznabFieldset(23),\r\n                getNewznabFieldset(24),\r\n                getNewznabFieldset(25),\r\n                getNewznabFieldset(26),\r\n                getNewznabFieldset(27),\r\n                getNewznabFieldset(28),\r\n                getNewznabFieldset(29),\r\n                getNewznabFieldset(30),\r\n                getNewznabFieldset(31),\r\n                getNewznabFieldset(32),\r\n                getNewznabFieldset(33),\r\n                getNewznabFieldset(34),\r\n                getNewznabFieldset(35),\r\n                getNewznabFieldset(36),\r\n                getNewznabFieldset(37),\r\n                getNewznabFieldset(38),\r\n                getNewznabFieldset(39),\r\n                getNewznabFieldset(40)\r\n\r\n\r\n            ],\r\n\r\n            system: [\r\n                {\r\n                    key: 'shutdown',\r\n                    type: 'shutdown',\r\n                    templateOptions: {\r\n                        type: 'button',\r\n                        label: 'Shutdown'\r\n                    }\r\n                },\r\n                {\r\n                    key: 'restart',\r\n                    type: 'restart',\r\n                    templateOptions: {\r\n                        type: 'button',\r\n                        label: 'Restart'\r\n                    }\r\n                }\r\n            ]\r\n\r\n\r\n        };\r\n        \r\n        \r\n\r\n    }\r\n\r\n}","angular\r\n    .module('nzbhydraApp')\r\n    .factory('ConfigModel', function () {\r\n        return {};\r\n    });\r\n\r\nangular\r\n    .module('nzbhydraApp')\r\n    .factory('ConfigWatcher', function () {\r\n        var $scope;\r\n        \r\n        return {\r\n            watch: watch\r\n        };\r\n        \r\n        function watch(scope) {\r\n            $scope = scope;\r\n            $scope.$watchGroup([\"config.main.host\"], function () {\r\n                console.log(\"Restart needed\");\r\n            }, true);\r\n        }\r\n    });\r\n\r\n\r\nangular\r\n    .module('nzbhydraApp')\r\n    .controller('ConfigController', ConfigController);\r\n\r\nfunction ConfigController($scope, ConfigService, config, CategoriesService, ConfigFields, ConfigModel, ModalService, RestartService, $state) {\r\n    $scope.config = config;\r\n    $scope.submit = submit;\r\n    \r\n    $scope.restartRequired = false;\r\n    \r\n    ConfigFields.setRestartWatcher(function() {\r\n        $scope.restartRequired = true;\r\n    });\r\n\r\n    function submit(form) {\r\n        ConfigService.set($scope.config);\r\n        ConfigService.invalidateSafe();\r\n        form.$setPristine();\r\n        CategoriesService.invalidate();\r\n        if ($scope.restartRequired) {\r\n            ModalService.open(\"Restart required\", \"The changes you have made may require a restart to be effective.<br>Do you want to restart now?\", function () {\r\n                RestartService.restart();\r\n            }, function() {\r\n                $scope.restartRequired = false;\r\n            });\r\n        }\r\n    }\r\n\r\n    ConfigModel = config;\r\n\r\n    $scope.fields = ConfigFields.getFields();\r\n\r\n    $scope.formTabs = [\r\n        {\r\n            name: 'Main',\r\n            model: ConfigModel.main,\r\n            fields: $scope.fields.main\r\n        },\r\n        {\r\n            name: 'Searching',\r\n            model: ConfigModel.searching,\r\n            fields: $scope.fields.searching\r\n        },\r\n        {\r\n            name: 'Downloader',\r\n            model: ConfigModel.downloader,\r\n            fields: $scope.fields.downloader\r\n        },\r\n        {\r\n            name: 'Indexers',\r\n            model: ConfigModel.indexers,\r\n            fields: $scope.fields.indexers\r\n        },\r\n        {\r\n            name: 'System',\r\n            model: ConfigModel.system,\r\n            fields: $scope.fields.system\r\n        }\r\n    ];\r\n\r\n    $scope.allTabs = [\r\n        {\r\n            active: false,\r\n            state: 'config'\r\n        },\r\n        {\r\n            active: false,\r\n            state: 'config.searching'\r\n        },\r\n        {\r\n            active: false,\r\n            state: 'config.downloader'\r\n        },\r\n        {\r\n            active: false,\r\n            state: 'config.indexers'\r\n        },\r\n        {\r\n            active: false,\r\n            state: 'config.system'\r\n        },\r\n        {\r\n            active: false,\r\n            state: 'config.log'\r\n        }\r\n    ];\r\n\r\n\r\n    for (var i = 0; i < $scope.allTabs.length; i++) {\r\n        if ($state.is($scope.allTabs[i].state)) {\r\n            $scope.allTabs[i].active = true;\r\n        }\r\n    }\r\n\r\n    $scope.isSavingNeeded = function (form) {\r\n        return form.$dirty && !form.$submitted;\r\n    };\r\n\r\n    $scope.downloadLog = function() {\r\n        if (angular.isUndefined($scope.log)) {\r\n            console.log(\"Downloading log\");\r\n            var myInjector = angular.injector([\"ng\"]);\r\n            var $http = myInjector.get(\"$http\");\r\n            var $sce = myInjector.get(\"$sce\");\r\n            $http.get(\"internalapi/getlogs\").success(function (data) {\r\n                $scope.log = $sce.trustAsHtml(data.log);\r\n                $scope.$digest();\r\n            });\r\n        }\r\n    };\r\n\r\n    $scope.goToConfigState = function (index) {\r\n        $state.go($scope.allTabs[index].state);\r\n        if (index == 5) {\r\n            $scope.downloadLog();\r\n        }\r\n    };\r\n    \r\n}\r\nConfigController.$inject = [\"$scope\", \"ConfigService\", \"config\", \"CategoriesService\", \"ConfigFields\", \"ConfigModel\", \"ModalService\", \"RestartService\", \"$state\"];\r\n\r\n\r\n","angular\r\n    .module('nzbhydraApp')\r\n    .factory('CategoriesService', CategoriesService);\r\n\r\nfunction CategoriesService($http, $q, $uibModal) {\r\n\r\n    var categories;\r\n    var selectedCategory;\r\n    \r\n    var service = {\r\n        get: getCategories,\r\n        invalidate: invalidate,\r\n        select : select,\r\n        openCategorySelection: openCategorySelection \r\n    };\r\n    \r\n    return service;\r\n    \r\n\r\n    function getCategories() {\r\n\r\n        function loadAll() {\r\n            if (!angular.isUndefined(categories)) {\r\n                var deferred = $q.defer();\r\n                deferred.resolve(categories);\r\n                return deferred.promise;\r\n            }\r\n\r\n            return $http.get('internalapi/getcategories')\r\n                .then(function (categoriesResponse) {\r\n                    \r\n                        console.log(\"Updating downloader categories cache\");\r\n                        categories = categoriesResponse.data;\r\n                        return categoriesResponse.data;\r\n                    \r\n                }, function(error) {\r\n                    throw error;\r\n                });\r\n        }\r\n\r\n        return loadAll().then(function (categories) {\r\n            return categories.categories;\r\n        });\r\n    }\r\n\r\n    \r\n    var deferred;\r\n    \r\n    function openCategorySelection() {\r\n        $uibModal.open({\r\n            templateUrl: 'static/html/directives/addable-nzb-modal.html',\r\n            controller: 'CategorySelectionController',\r\n            size: \"sm\",\r\n            resolve: {\r\n                categories: getCategories\r\n            }\r\n        });\r\n        deferred = $q.defer();\r\n        return deferred.promise;\r\n    }\r\n    \r\n    function select(category) {\r\n        selectedCategory = category;\r\n        console.log(\"Selected category \" + category);\r\n        deferred.resolve(category);\r\n    }\r\n    \r\n    function invalidate() {\r\n        console.log(\"Invalidating categories\");\r\n        categories = undefined;\r\n    }\r\n}\r\nCategoriesService.$inject = [\"$http\", \"$q\", \"$uibModal\"];\r\n\r\nangular\r\n    .module('nzbhydraApp').controller('CategorySelectionController', [\"$scope\", \"$uibModalInstance\", \"CategoriesService\", \"categories\", function ($scope, $uibModalInstance, CategoriesService, categories) {\r\n    console.log(categories);\r\n    $scope.categories = categories;\r\n    $scope.select = function (category) {\r\n        CategoriesService.select(category);\r\n        $uibModalInstance.close($scope);\r\n    }\r\n}]);","angular\r\n    .module('nzbhydraApp')\r\n    .controller('AboutController', AboutController);\r\n\r\nfunction AboutController($scope, versionsPromise, UpdateService) {\r\n\r\n    $scope.currentVersion = versionsPromise.data.currentVersion;\r\n    $scope.repVersion = versionsPromise.data.repVersion;\r\n    $scope.updateAvailable = versionsPromise.data.updateAvailable;\r\n\r\n    $scope.update = function () {\r\n        UpdateService.update();\r\n    }\r\n\r\n}\r\nAboutController.$inject = [\"$scope\", \"versionsPromise\", \"UpdateService\"];\r\n"],"sourceRoot":"/source/"}